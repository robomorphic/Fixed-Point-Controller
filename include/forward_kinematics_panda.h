#include <math.h>
#include "inverse_kinematics_config.h"



/* @pre: ((qsin_0 > -1.0) && (qsin_0 < 1.0) && (qsin_1 > -1.0) && (qsin_1 < 1.0) && (qsin_2 > -1.0) && (qsin_2 < 1.0) && (qsin_3 > -1.0) && (qsin_3 < -0.0698) && (qsin_4 > -1.0) && (qsin_4 < 1.0) && (qsin_5 > -0.573) && (qsin_5 < 1.0) && (qsin_6 > -1.0) && (qsin_6 < 1.0) && (qcos_0 > -0.97) && (qcos_0 < 1.0) && (qcos_1 > -0.1908) && (qcos_1 < 1.0) && (qcos_2 > -0.97) && (qcos_2 < 1.0) && (qcos_3 > -0.9976) && (qcos_3 < 0.9976) && (qcos_4 > -0.97) && (qcos_4 < 1.0) && (qcos_5 > -1.0) && (qcos_5 < 1.0) && (qcos_6 > -0.97) && (qcos_6 < 1.0) && (v_0 > -0.5) && (v_0 < 0.5) && (v_1 > -0.5) && (v_1 < 0.5) && (v_2 > -0.5) && (v_2 < 0.5) && (v_3 > -0.5) && (v_3 < 0.5) && (v_4 > -0.5) && (v_4 < 0.5) && (v_5 > -0.5) && (v_5 < 0.5) && (v_6 > -0.5) && (v_6 < 0.5) && (a_0 > -1.0) && (a_0 < 1.0) && (a_1 > -1.0) && (a_1 < 1.0) && (a_2 > -1.0) && (a_2 < 1.0) && (a_3 > -1.0) && (a_3 < 1.0) && (a_4 > -1.0) && (a_4 < 1.0) && (a_5 > -1.0) && (a_5 < 1.0) && (a_6 > -1.0) && (a_6 < 1.0)) */
SE3s ForwardKinematics(
    double qcos_0, double qcos_1, double qcos_2, double qcos_3, double qcos_4, double qcos_5, double qcos_6, 
    double qsin_0, double qsin_1, double qsin_2, double qsin_3, double qsin_4, double qsin_5, double qsin_6, 
    double v_0, double v_1, double v_2, double v_3, double v_4, double v_5, double v_6, 
    double a_0, double a_1, double a_2, double a_3, double a_4, double a_5, double a_6) 
{
    double limi_translation_0_0 = 0;
    double limi_translation_0_1 = 0;
    double limi_translation_0_2 = 0.333;
    double limi_translation_1_0 = 0;
    double limi_translation_1_1 = 0;
    double limi_translation_1_2 = 0;
    double limi_translation_2_0 = 0;
    double limi_translation_2_1 = -0.316;
    double limi_translation_2_2 = 0;
    double limi_translation_3_0 = 0.0825;
    double limi_translation_3_1 = 0;
    double limi_translation_3_2 = 0;
    double limi_translation_4_0 = -0.0825;
    double limi_translation_4_1 = 0.384;
    double limi_translation_4_2 = 0;
    double limi_translation_5_0 = 0;
    double limi_translation_5_1 = 0;
    double limi_translation_5_2 = 0;
    double limi_translation_6_0 = 0.088;
    double limi_translation_6_1 = 0;
    double limi_translation_6_2 = 0;
    double lever_0_0 = 0.003875;
    double lever_0_1 = 0.002081;
    double lever_0_2 = -0.04762;
    double lever_1_0 = -0.003141;
    double lever_1_1 = -0.02872;
    double lever_1_2 = 0.003495;
    double lever_2_0 = 0.027518;
    double lever_2_1 = 0.039252;
    double lever_2_2 = -0.066502;
    double lever_3_0 = -0.05317;
    double lever_3_1 = 0.104419;
    double lever_3_2 = 0.027454;
    double lever_4_0 = -0.011953;
    double lever_4_1 = 0.041065;
    double lever_4_2 = -0.038437;
    double lever_5_0 = 0.060149;
    double lever_5_1 = -0.014117;
    double lever_5_2 = -0.010517;
    double lever_6_0 = 0.010517;
    double lever_6_1 = -0.004252;
    double lever_6_2 = 0.061597;
    double masses_0 = 4.970684;
    double masses_1 = 0.646926;
    double masses_2 = 3.228604;
    double masses_3 = 3.587895;
    double masses_4 = 1.225946;
    double masses_5 = 1.66656;
    double masses_6 = 0.735522;
    double inertia_0_0_0 = 0.70337;
    double inertia_0_0_1 = -1.39E-4;
    double inertia_0_0_2 = 0.006772;
    double inertia_0_1_0 = -1.39E-4;
    double inertia_0_1_1 = 0.70661;
    double inertia_0_1_2 = 0.019169;
    double inertia_0_2_0 = 0.006772;
    double inertia_0_2_1 = 0.019169;
    double inertia_0_2_2 = 0.009117;
    double inertia_1_0_0 = 0.007962;
    double inertia_1_0_1 = -0.003925;
    double inertia_1_0_2 = 0.010254;
    double inertia_1_1_0 = -0.003925;
    double inertia_1_1_1 = 0.02811;
    double inertia_1_1_2 = 7.04E-4;
    double inertia_1_2_0 = 0.010254;
    double inertia_1_2_1 = 7.04E-4;
    double inertia_1_2_2 = 0.025995;
    double inertia_2_0_0 = 0.037242;
    double inertia_2_0_1 = -0.004761;
    double inertia_2_0_2 = -0.011396;
    double inertia_2_1_0 = -0.004761;
    double inertia_2_1_1 = 0.036155;
    double inertia_2_1_2 = -0.012805;
    double inertia_2_2_0 = -0.011396;
    double inertia_2_2_1 = -0.012805;
    double inertia_2_2_2 = 0.01083;
    double inertia_3_0_0 = 0.025853;
    double inertia_3_0_1 = 0.007796;
    double inertia_3_0_2 = -0.001332;
    double inertia_3_1_0 = 0.007796;
    double inertia_3_1_1 = 0.019552;
    double inertia_3_1_2 = 0.008641;
    double inertia_3_2_0 = -0.001332;
    double inertia_3_2_1 = 0.008641;
    double inertia_3_2_2 = 0.028323;
    double inertia_4_0_0 = 0.035549;
    double inertia_4_0_1 = -0.002117;
    double inertia_4_0_2 = -0.004037;
    double inertia_4_1_0 = -0.002117;
    double inertia_4_1_1 = 0.029474;
    double inertia_4_1_2 = 2.29E-4;
    double inertia_4_2_0 = -0.004037;
    double inertia_4_2_1 = 2.29E-4;
    double inertia_4_2_2 = 0.008627;
    double inertia_5_0_0 = 0.001964;
    double inertia_5_0_1 = 1.09E-4;
    double inertia_5_0_2 = -0.001158;
    double inertia_5_1_0 = 1.09E-4;
    double inertia_5_1_1 = 0.004354;
    double inertia_5_1_2 = 3.41E-4;
    double inertia_5_2_0 = -0.001158;
    double inertia_5_2_1 = 3.41E-4;
    double inertia_5_2_2 = 0.005433;
    double inertia_6_0_0 = 0.012516;
    double inertia_6_0_1 = -4.28E-4;
    double inertia_6_0_2 = -0.001196;
    double inertia_6_1_0 = -4.28E-4;
    double inertia_6_1_1 = 0.010027;
    double inertia_6_1_2 = -7.41E-4;
    double inertia_6_2_0 = -0.001196;
    double inertia_6_2_1 = -7.41E-4;
    double inertia_6_2_2 = 0.004815;
    double rotation_matrix_0_0_0 = qcos_0;
    double rotation_matrix_0_0_1 = -(qsin_0);
    double rotation_matrix_0_0_2 = 0;
    double rotation_matrix_0_1_0 = qsin_0;
    double rotation_matrix_0_1_1 = qcos_0;
    double rotation_matrix_0_1_2 = 0;
    double rotation_matrix_0_2_0 = 0;
    double rotation_matrix_0_2_1 = 0;
    double rotation_matrix_0_2_2 = 1;
    double limi_rotation_0_0_0 = rotation_matrix_0_0_0;
    double limi_rotation_0_0_1 = rotation_matrix_0_0_1;
    double limi_rotation_0_0_2 = 0;
    double limi_rotation_0_1_0 = rotation_matrix_0_1_0;
    double limi_rotation_0_1_1 = rotation_matrix_0_1_1;
    double limi_rotation_0_1_2 = 0;
    double limi_rotation_0_2_0 = 0;
    double limi_rotation_0_2_1 = 0;
    double limi_rotation_0_2_2 = 1;
    double final_v_0_0 = 0;
    double final_v_0_1 = 0;
    double final_v_0_2 = 0;
    double final_v_0_3 = 0;
    double final_v_0_4 = 0;
    double final_v_0_5 = v_0;
    double minus_m_w_0 = -(v_0);
    double vin_linear_0_0 = final_v_0_0;
    double vin_linear_0_1 = final_v_0_1;
    double vin_linear_0_2 = final_v_0_2;
    double vin_angular_0_0 = final_v_0_3;
    double vin_angular_0_1 = final_v_0_4;
    double vin_angular_0_2 = final_v_0_5;
    double alpha_cross1_linear_0 = (-(minus_m_w_0) * vin_linear_0_1);
    double alpha_cross2_linear_0 = (minus_m_w_0 * vin_linear_0_0);
    double alpha_cross_linear_0_0 = alpha_cross1_linear_0;
    double alpha_cross_linear_0_1 = alpha_cross2_linear_0;
    double alpha_cross_linear_0_2 = 0;
    double alpha_cross1_angular_0 = (-(minus_m_w_0) * vin_angular_0_1);
    double alpha_cross2_angular_0 = (minus_m_w_0 * vin_angular_0_0);
    double alpha_cross_angular_0_0 = alpha_cross1_angular_0;
    double alpha_cross_angular_0_1 = alpha_cross2_angular_0;
    double alpha_cross_angular_0_2 = 0;
    double alpha_cross_0_0 = alpha_cross_linear_0_0;
    double alpha_cross_0_1 = alpha_cross_linear_0_1;
    double alpha_cross_0_2 = alpha_cross_linear_0_2;
    double alpha_cross_0_3 = alpha_cross_angular_0_0;
    double alpha_cross_0_4 = alpha_cross_angular_0_1;
    double alpha_cross_0_5 = alpha_cross_angular_0_2;
    double temp_a2_0 = (a_0 + alpha_cross_0_5);
    double temp_a3_0_0 = alpha_cross_0_0;
    double temp_a3_0_1 = alpha_cross_0_1;
    double temp_a3_0_2 = alpha_cross_0_2;
    double temp_a3_0_3 = alpha_cross_0_3;
    double temp_a3_0_4 = alpha_cross_0_4;
    double temp_a3_0_5 = temp_a2_0;
    double final_a_0_0 = temp_a3_0_0;
    double final_a_0_1 = temp_a3_0_1;
    double final_a_0_2 = temp_a3_0_2;
    double final_a_0_3 = temp_a3_0_3;
    double final_a_0_4 = temp_a3_0_4;
    double final_a_0_5 = temp_a3_0_5;
    double rotation_matrix_1_0_0 = qcos_1;
    double rotation_matrix_1_0_1 = -(qsin_1);
    double rotation_matrix_1_0_2 = 0;
    double rotation_matrix_1_1_0 = qsin_1;
    double rotation_matrix_1_1_1 = qcos_1;
    double rotation_matrix_1_1_2 = 0;
    double rotation_matrix_1_2_0 = 0;
    double rotation_matrix_1_2_1 = 0;
    double rotation_matrix_1_2_2 = 1;
    double limi_rotation_1_0_0 = rotation_matrix_1_0_0;
    double limi_rotation_1_0_1 = rotation_matrix_1_0_1;
    double limi_rotation_1_0_2 = 0;
    double limi_rotation_1_1_0 = 0;
    double limi_rotation_1_1_1 = 0;
    double limi_rotation_1_1_2 = 1;
    double limi_rotation_1_2_0 = -(rotation_matrix_1_1_0);
    double limi_rotation_1_2_1 = -(rotation_matrix_1_1_1);
    double limi_rotation_1_2_2 = 0;
    double oMi_rotation_1_0_0 = (((limi_rotation_0_0_0 * limi_rotation_1_0_0) + (limi_rotation_0_0_1 * limi_rotation_1_1_0)) + (limi_rotation_0_0_2 * limi_rotation_1_2_0));
    double oMi_rotation_1_0_1 = (((limi_rotation_0_0_0 * limi_rotation_1_0_1) + (limi_rotation_0_0_1 * limi_rotation_1_1_1)) + (limi_rotation_0_0_2 * limi_rotation_1_2_1));
    double oMi_rotation_1_0_2 = (((limi_rotation_0_0_0 * limi_rotation_1_0_2) + (limi_rotation_0_0_1 * limi_rotation_1_1_2)) + (limi_rotation_0_0_2 * limi_rotation_1_2_2));
    double oMi_rotation_1_1_0 = (((limi_rotation_0_1_0 * limi_rotation_1_0_0) + (limi_rotation_0_1_1 * limi_rotation_1_1_0)) + (limi_rotation_0_1_2 * limi_rotation_1_2_0));
    double oMi_rotation_1_1_1 = (((limi_rotation_0_1_0 * limi_rotation_1_0_1) + (limi_rotation_0_1_1 * limi_rotation_1_1_1)) + (limi_rotation_0_1_2 * limi_rotation_1_2_1));
    double oMi_rotation_1_1_2 = (((limi_rotation_0_1_0 * limi_rotation_1_0_2) + (limi_rotation_0_1_1 * limi_rotation_1_1_2)) + (limi_rotation_0_1_2 * limi_rotation_1_2_2));
    double oMi_rotation_1_2_0 = (((limi_rotation_0_2_0 * limi_rotation_1_0_0) + (limi_rotation_0_2_1 * limi_rotation_1_1_0)) + (limi_rotation_0_2_2 * limi_rotation_1_2_0));
    double oMi_rotation_1_2_1 = (((limi_rotation_0_2_0 * limi_rotation_1_0_1) + (limi_rotation_0_2_1 * limi_rotation_1_1_1)) + (limi_rotation_0_2_2 * limi_rotation_1_2_1));
    double oMi_rotation_1_2_2 = (((limi_rotation_0_2_0 * limi_rotation_1_0_2) + (limi_rotation_0_2_1 * limi_rotation_1_1_2)) + (limi_rotation_0_2_2 * limi_rotation_1_2_2));
    double r_1_oMi_rotation_1_0_0 = (((limi_rotation_0_0_0 * limi_rotation_1_0_0) + (limi_rotation_0_0_1 * limi_rotation_1_1_0)) + (limi_rotation_0_0_2 * limi_rotation_1_2_0));
    double r_1_oMi_rotation_1_0_1 = (((limi_rotation_0_0_0 * limi_rotation_1_0_1) + (limi_rotation_0_0_1 * limi_rotation_1_1_1)) + (limi_rotation_0_0_2 * limi_rotation_1_2_1));
    double r_1_oMi_rotation_1_0_2 = (((limi_rotation_0_0_0 * limi_rotation_1_0_2) + (limi_rotation_0_0_1 * limi_rotation_1_1_2)) + (limi_rotation_0_0_2 * limi_rotation_1_2_2));
    double r_1_oMi_rotation_1_1_0 = (((limi_rotation_0_1_0 * limi_rotation_1_0_0) + (limi_rotation_0_1_1 * limi_rotation_1_1_0)) + (limi_rotation_0_1_2 * limi_rotation_1_2_0));
    double r_1_oMi_rotation_1_1_1 = (((limi_rotation_0_1_0 * limi_rotation_1_0_1) + (limi_rotation_0_1_1 * limi_rotation_1_1_1)) + (limi_rotation_0_1_2 * limi_rotation_1_2_1));
    double r_1_oMi_rotation_1_1_2 = (((limi_rotation_0_1_0 * limi_rotation_1_0_2) + (limi_rotation_0_1_1 * limi_rotation_1_1_2)) + (limi_rotation_0_1_2 * limi_rotation_1_2_2));
    double r_1_oMi_rotation_1_2_0 = (((limi_rotation_0_2_0 * limi_rotation_1_0_0) + (limi_rotation_0_2_1 * limi_rotation_1_1_0)) + (limi_rotation_0_2_2 * limi_rotation_1_2_0));
    double r_1_oMi_rotation_1_2_1 = (((limi_rotation_0_2_0 * limi_rotation_1_0_1) + (limi_rotation_0_2_1 * limi_rotation_1_1_1)) + (limi_rotation_0_2_2 * limi_rotation_1_2_1));
    double r_1_oMi_rotation_1_2_2 = (((limi_rotation_0_2_0 * limi_rotation_1_0_2) + (limi_rotation_0_2_1 * limi_rotation_1_1_2)) + (limi_rotation_0_2_2 * limi_rotation_1_2_2));
    double oMi_translation_to_add_1_0 = (((limi_rotation_0_0_0 * limi_translation_1_0) + (limi_rotation_0_0_1 * limi_translation_1_1)) + (limi_rotation_0_0_2 * limi_translation_1_2));
    double oMi_translation_to_add_1_1 = (((limi_rotation_0_1_0 * limi_translation_1_0) + (limi_rotation_0_1_1 * limi_translation_1_1)) + (limi_rotation_0_1_2 * limi_translation_1_2));
    double oMi_translation_to_add_1_2 = (((limi_rotation_0_2_0 * limi_translation_1_0) + (limi_rotation_0_2_1 * limi_translation_1_1)) + (limi_rotation_0_2_2 * limi_translation_1_2));
    double oMi_translation_1_0 = (limi_translation_0_0 + oMi_translation_to_add_1_0);
    double oMi_translation_1_1 = (limi_translation_0_1 + oMi_translation_to_add_1_1);
    double oMi_translation_1_2 = (limi_translation_0_2 + oMi_translation_to_add_1_2);
    double final_omi_rotation_1_0_0 = r_1_oMi_rotation_1_0_0;
    double final_omi_rotation_1_0_1 = r_1_oMi_rotation_1_0_1;
    double final_omi_rotation_1_0_2 = r_1_oMi_rotation_1_0_2;
    double final_omi_rotation_1_1_0 = r_1_oMi_rotation_1_1_0;
    double final_omi_rotation_1_1_1 = r_1_oMi_rotation_1_1_1;
    double final_omi_rotation_1_1_2 = r_1_oMi_rotation_1_1_2;
    double final_omi_rotation_1_2_0 = r_1_oMi_rotation_1_2_0;
    double final_omi_rotation_1_2_1 = r_1_oMi_rotation_1_2_1;
    double final_omi_rotation_1_2_2 = r_1_oMi_rotation_1_2_2;
    double final_omi_translation_1_0 = oMi_translation_1_0;
    double final_omi_translation_1_1 = oMi_translation_1_1;
    double final_omi_translation_1_2 = oMi_translation_1_2;
    double temp_v_1_0 = 0;
    double temp_v_1_1 = 0;
    double temp_v_1_2 = 0;
    double temp_v_1_3 = 0;
    double temp_v_1_4 = 0;
    double temp_v_1_5 = v_1;
    double linear_parent_1_0 = final_v_0_0;
    double linear_parent_1_1 = final_v_0_1;
    double linear_parent_1_2 = final_v_0_2;
    double angular_parent_1_0 = final_v_0_3;
    double angular_parent_1_1 = final_v_0_4;
    double angular_parent_1_2 = final_v_0_5;
    double linear_1_0 = temp_v_1_0;
    double linear_1_1 = temp_v_1_1;
    double linear_1_2 = temp_v_1_2;
    double angular_1_0 = temp_v_1_3;
    double angular_1_1 = temp_v_1_4;
    double angular_1_2 = temp_v_1_5;
    double actInv1_1_0 = ((limi_translation_1_1 * angular_parent_1_2) - (limi_translation_1_2 * angular_parent_1_1));
    double actInv1_1_1 = ((limi_translation_1_2 * angular_parent_1_0) - (limi_translation_1_0 * angular_parent_1_2));
    double actInv1_1_2 = ((limi_translation_1_0 * angular_parent_1_1) - (limi_translation_1_1 * angular_parent_1_0));
    double actInv2_1_0 = (linear_parent_1_0 - actInv1_1_0);
    double actInv2_1_1 = (linear_parent_1_1 - actInv1_1_1);
    double actInv2_1_2 = (linear_parent_1_2 - actInv1_1_2);
    double actInv3_1_0_0 = limi_rotation_1_0_0;
    double actInv3_1_1_0 = limi_rotation_1_0_1;
    double actInv3_1_2_0 = limi_rotation_1_0_2;
    double actInv3_1_0_1 = limi_rotation_1_1_0;
    double actInv3_1_1_1 = limi_rotation_1_1_1;
    double actInv3_1_2_1 = limi_rotation_1_1_2;
    double actInv3_1_0_2 = limi_rotation_1_2_0;
    double actInv3_1_1_2 = limi_rotation_1_2_1;
    double actInv3_1_2_2 = limi_rotation_1_2_2;
    double actInv4_1_0 = (((actInv3_1_0_0 * actInv2_1_0) + (actInv3_1_0_1 * actInv2_1_1)) + (actInv3_1_0_2 * actInv2_1_2));
    double actInv4_1_1 = (((actInv3_1_1_0 * actInv2_1_0) + (actInv3_1_1_1 * actInv2_1_1)) + (actInv3_1_1_2 * actInv2_1_2));
    double actInv4_1_2 = (((actInv3_1_2_0 * actInv2_1_0) + (actInv3_1_2_1 * actInv2_1_1)) + (actInv3_1_2_2 * actInv2_1_2));
    double act_inv_linear_1_0 = (linear_1_0 + actInv4_1_0);
    double act_inv_linear_1_1 = (linear_1_1 + actInv4_1_1);
    double act_inv_linear_1_2 = (linear_1_2 + actInv4_1_2);
    double actInv5_1_0 = (((actInv3_1_0_0 * angular_parent_1_0) + (actInv3_1_0_1 * angular_parent_1_1)) + (actInv3_1_0_2 * angular_parent_1_2));
    double actInv5_1_1 = (((actInv3_1_1_0 * angular_parent_1_0) + (actInv3_1_1_1 * angular_parent_1_1)) + (actInv3_1_1_2 * angular_parent_1_2));
    double actInv5_1_2 = (((actInv3_1_2_0 * angular_parent_1_0) + (actInv3_1_2_1 * angular_parent_1_1)) + (actInv3_1_2_2 * angular_parent_1_2));
    double act_inv_angular_1_0 = (angular_1_0 + actInv5_1_0);
    double act_inv_angular_1_1 = (angular_1_1 + actInv5_1_1);
    double act_inv_angular_1_2 = (angular_1_2 + actInv5_1_2);
    double act_inv_res_1_0 = act_inv_linear_1_0;
    double act_inv_res_1_1 = act_inv_linear_1_1;
    double act_inv_res_1_2 = act_inv_linear_1_2;
    double act_inv_res_1_3 = act_inv_angular_1_0;
    double act_inv_res_1_4 = act_inv_angular_1_1;
    double act_inv_res_1_5 = act_inv_angular_1_2;
    double final_v_1_0 = act_inv_res_1_0;
    double final_v_1_1 = act_inv_res_1_1;
    double final_v_1_2 = act_inv_res_1_2;
    double final_v_1_3 = act_inv_res_1_3;
    double final_v_1_4 = act_inv_res_1_4;
    double final_v_1_5 = act_inv_res_1_5;
    double minus_m_w_1 = -(v_1);
    double vin_linear_1_0 = final_v_1_0;
    double vin_linear_1_1 = final_v_1_1;
    double vin_linear_1_2 = final_v_1_2;
    double vin_angular_1_0 = final_v_1_3;
    double vin_angular_1_1 = final_v_1_4;
    double vin_angular_1_2 = final_v_1_5;
    double alpha_cross1_linear_1 = (-(minus_m_w_1) * vin_linear_1_1);
    double alpha_cross2_linear_1 = (minus_m_w_1 * vin_linear_1_0);
    double alpha_cross_linear_1_0 = alpha_cross1_linear_1;
    double alpha_cross_linear_1_1 = alpha_cross2_linear_1;
    double alpha_cross_linear_1_2 = 0;
    double alpha_cross1_angular_1 = (-(minus_m_w_1) * vin_angular_1_1);
    double alpha_cross2_angular_1 = (minus_m_w_1 * vin_angular_1_0);
    double alpha_cross_angular_1_0 = alpha_cross1_angular_1;
    double alpha_cross_angular_1_1 = alpha_cross2_angular_1;
    double alpha_cross_angular_1_2 = 0;
    double alpha_cross_1_0 = alpha_cross_linear_1_0;
    double alpha_cross_1_1 = alpha_cross_linear_1_1;
    double alpha_cross_1_2 = alpha_cross_linear_1_2;
    double alpha_cross_1_3 = alpha_cross_angular_1_0;
    double alpha_cross_1_4 = alpha_cross_angular_1_1;
    double alpha_cross_1_5 = alpha_cross_angular_1_2;
    double temp_a2_1 = (a_1 + alpha_cross_1_5);
    double temp_a3_1_0 = alpha_cross_1_0;
    double temp_a3_1_1 = alpha_cross_1_1;
    double temp_a3_1_2 = alpha_cross_1_2;
    double temp_a3_1_3 = alpha_cross_1_3;
    double temp_a3_1_4 = alpha_cross_1_4;
    double temp_a3_1_5 = temp_a2_1;
    double r_2_linear_parent_1_0 = final_a_0_0;
    double r_2_linear_parent_1_1 = final_a_0_1;
    double r_2_linear_parent_1_2 = final_a_0_2;
    double r_3_angular_parent_1_0 = final_a_0_3;
    double r_3_angular_parent_1_1 = final_a_0_4;
    double r_3_angular_parent_1_2 = final_a_0_5;
    double r_4_actInv1_1_0 = ((limi_translation_1_1 * r_3_angular_parent_1_2) - (limi_translation_1_2 * r_3_angular_parent_1_1));
    double r_4_actInv1_1_1 = ((limi_translation_1_2 * r_3_angular_parent_1_0) - (limi_translation_1_0 * r_3_angular_parent_1_2));
    double r_4_actInv1_1_2 = ((limi_translation_1_0 * r_3_angular_parent_1_1) - (limi_translation_1_1 * r_3_angular_parent_1_0));
    double r_5_actInv2_1_0 = (r_2_linear_parent_1_0 - r_4_actInv1_1_0);
    double r_5_actInv2_1_1 = (r_2_linear_parent_1_1 - r_4_actInv1_1_1);
    double r_5_actInv2_1_2 = (r_2_linear_parent_1_2 - r_4_actInv1_1_2);
    double r_6_actInv3_1_0_0 = limi_rotation_1_0_0;
    double r_6_actInv3_1_1_0 = limi_rotation_1_0_1;
    double r_6_actInv3_1_2_0 = limi_rotation_1_0_2;
    double r_6_actInv3_1_0_1 = limi_rotation_1_1_0;
    double r_6_actInv3_1_1_1 = limi_rotation_1_1_1;
    double r_6_actInv3_1_2_1 = limi_rotation_1_1_2;
    double r_6_actInv3_1_0_2 = limi_rotation_1_2_0;
    double r_6_actInv3_1_1_2 = limi_rotation_1_2_1;
    double r_6_actInv3_1_2_2 = limi_rotation_1_2_2;
    double r_7_actInv4_1_0 = (((r_6_actInv3_1_0_0 * r_5_actInv2_1_0) + (r_6_actInv3_1_0_1 * r_5_actInv2_1_1)) + (r_6_actInv3_1_0_2 * r_5_actInv2_1_2));
    double r_7_actInv4_1_1 = (((r_6_actInv3_1_1_0 * r_5_actInv2_1_0) + (r_6_actInv3_1_1_1 * r_5_actInv2_1_1)) + (r_6_actInv3_1_1_2 * r_5_actInv2_1_2));
    double r_7_actInv4_1_2 = (((r_6_actInv3_1_2_0 * r_5_actInv2_1_0) + (r_6_actInv3_1_2_1 * r_5_actInv2_1_1)) + (r_6_actInv3_1_2_2 * r_5_actInv2_1_2));
    double r_8_actInv5_1_0 = (((r_6_actInv3_1_0_0 * r_3_angular_parent_1_0) + (r_6_actInv3_1_0_1 * r_3_angular_parent_1_1)) + (r_6_actInv3_1_0_2 * r_3_angular_parent_1_2));
    double r_8_actInv5_1_1 = (((r_6_actInv3_1_1_0 * r_3_angular_parent_1_0) + (r_6_actInv3_1_1_1 * r_3_angular_parent_1_1)) + (r_6_actInv3_1_1_2 * r_3_angular_parent_1_2));
    double r_8_actInv5_1_2 = (((r_6_actInv3_1_2_0 * r_3_angular_parent_1_0) + (r_6_actInv3_1_2_1 * r_3_angular_parent_1_1)) + (r_6_actInv3_1_2_2 * r_3_angular_parent_1_2));
    double r_9_act_inv_res_1_0 = r_7_actInv4_1_0;
    double r_9_act_inv_res_1_1 = r_7_actInv4_1_1;
    double r_9_act_inv_res_1_2 = r_7_actInv4_1_2;
    double r_9_act_inv_res_1_3 = r_8_actInv5_1_0;
    double r_9_act_inv_res_1_4 = r_8_actInv5_1_1;
    double r_9_act_inv_res_1_5 = r_8_actInv5_1_2;
    double final_a_1_0 = (temp_a3_1_0 + r_9_act_inv_res_1_0);
    double final_a_1_1 = (temp_a3_1_1 + r_9_act_inv_res_1_1);
    double final_a_1_2 = (temp_a3_1_2 + r_9_act_inv_res_1_2);
    double final_a_1_3 = (temp_a3_1_3 + r_9_act_inv_res_1_3);
    double final_a_1_4 = (temp_a3_1_4 + r_9_act_inv_res_1_4);
    double final_a_1_5 = (temp_a3_1_5 + r_9_act_inv_res_1_5);
    double rotation_matrix_2_0_0 = qcos_2;
    double rotation_matrix_2_0_1 = -(qsin_2);
    double rotation_matrix_2_0_2 = 0;
    double rotation_matrix_2_1_0 = qsin_2;
    double rotation_matrix_2_1_1 = qcos_2;
    double rotation_matrix_2_1_2 = 0;
    double rotation_matrix_2_2_0 = 0;
    double rotation_matrix_2_2_1 = 0;
    double rotation_matrix_2_2_2 = 1;
    double limi_rotation_2_0_0 = rotation_matrix_2_0_0;
    double limi_rotation_2_0_1 = rotation_matrix_2_0_1;
    double limi_rotation_2_0_2 = 0;
    double limi_rotation_2_1_0 = 0;
    double limi_rotation_2_1_1 = 0;
    double limi_rotation_2_1_2 = -1;
    double limi_rotation_2_2_0 = rotation_matrix_2_1_0;
    double limi_rotation_2_2_1 = rotation_matrix_2_1_1;
    double limi_rotation_2_2_2 = 0;
    double oMi_rotation_2_0_0 = (((final_omi_rotation_1_0_0 * limi_rotation_2_0_0) + (final_omi_rotation_1_0_1 * limi_rotation_2_1_0)) + (final_omi_rotation_1_0_2 * limi_rotation_2_2_0));
    double oMi_rotation_2_0_1 = (((final_omi_rotation_1_0_0 * limi_rotation_2_0_1) + (final_omi_rotation_1_0_1 * limi_rotation_2_1_1)) + (final_omi_rotation_1_0_2 * limi_rotation_2_2_1));
    double oMi_rotation_2_0_2 = (((final_omi_rotation_1_0_0 * limi_rotation_2_0_2) + (final_omi_rotation_1_0_1 * limi_rotation_2_1_2)) + (final_omi_rotation_1_0_2 * limi_rotation_2_2_2));
    double oMi_rotation_2_1_0 = (((final_omi_rotation_1_1_0 * limi_rotation_2_0_0) + (final_omi_rotation_1_1_1 * limi_rotation_2_1_0)) + (final_omi_rotation_1_1_2 * limi_rotation_2_2_0));
    double oMi_rotation_2_1_1 = (((final_omi_rotation_1_1_0 * limi_rotation_2_0_1) + (final_omi_rotation_1_1_1 * limi_rotation_2_1_1)) + (final_omi_rotation_1_1_2 * limi_rotation_2_2_1));
    double oMi_rotation_2_1_2 = (((final_omi_rotation_1_1_0 * limi_rotation_2_0_2) + (final_omi_rotation_1_1_1 * limi_rotation_2_1_2)) + (final_omi_rotation_1_1_2 * limi_rotation_2_2_2));
    double oMi_rotation_2_2_0 = (((final_omi_rotation_1_2_0 * limi_rotation_2_0_0) + (final_omi_rotation_1_2_1 * limi_rotation_2_1_0)) + (final_omi_rotation_1_2_2 * limi_rotation_2_2_0));
    double oMi_rotation_2_2_1 = (((final_omi_rotation_1_2_0 * limi_rotation_2_0_1) + (final_omi_rotation_1_2_1 * limi_rotation_2_1_1)) + (final_omi_rotation_1_2_2 * limi_rotation_2_2_1));
    double oMi_rotation_2_2_2 = (((final_omi_rotation_1_2_0 * limi_rotation_2_0_2) + (final_omi_rotation_1_2_1 * limi_rotation_2_1_2)) + (final_omi_rotation_1_2_2 * limi_rotation_2_2_2));
    double r_10_oMi_rotation_2_0_0 = (((final_omi_rotation_1_0_0 * limi_rotation_2_0_0) + (final_omi_rotation_1_0_1 * limi_rotation_2_1_0)) + (final_omi_rotation_1_0_2 * limi_rotation_2_2_0));
    double r_10_oMi_rotation_2_0_1 = (((final_omi_rotation_1_0_0 * limi_rotation_2_0_1) + (final_omi_rotation_1_0_1 * limi_rotation_2_1_1)) + (final_omi_rotation_1_0_2 * limi_rotation_2_2_1));
    double r_10_oMi_rotation_2_0_2 = (((final_omi_rotation_1_0_0 * limi_rotation_2_0_2) + (final_omi_rotation_1_0_1 * limi_rotation_2_1_2)) + (final_omi_rotation_1_0_2 * limi_rotation_2_2_2));
    double r_10_oMi_rotation_2_1_0 = (((final_omi_rotation_1_1_0 * limi_rotation_2_0_0) + (final_omi_rotation_1_1_1 * limi_rotation_2_1_0)) + (final_omi_rotation_1_1_2 * limi_rotation_2_2_0));
    double r_10_oMi_rotation_2_1_1 = (((final_omi_rotation_1_1_0 * limi_rotation_2_0_1) + (final_omi_rotation_1_1_1 * limi_rotation_2_1_1)) + (final_omi_rotation_1_1_2 * limi_rotation_2_2_1));
    double r_10_oMi_rotation_2_1_2 = (((final_omi_rotation_1_1_0 * limi_rotation_2_0_2) + (final_omi_rotation_1_1_1 * limi_rotation_2_1_2)) + (final_omi_rotation_1_1_2 * limi_rotation_2_2_2));
    double r_10_oMi_rotation_2_2_0 = (((final_omi_rotation_1_2_0 * limi_rotation_2_0_0) + (final_omi_rotation_1_2_1 * limi_rotation_2_1_0)) + (final_omi_rotation_1_2_2 * limi_rotation_2_2_0));
    double r_10_oMi_rotation_2_2_1 = (((final_omi_rotation_1_2_0 * limi_rotation_2_0_1) + (final_omi_rotation_1_2_1 * limi_rotation_2_1_1)) + (final_omi_rotation_1_2_2 * limi_rotation_2_2_1));
    double r_10_oMi_rotation_2_2_2 = (((final_omi_rotation_1_2_0 * limi_rotation_2_0_2) + (final_omi_rotation_1_2_1 * limi_rotation_2_1_2)) + (final_omi_rotation_1_2_2 * limi_rotation_2_2_2));
    double oMi_translation_to_add_2_0 = (((final_omi_rotation_1_0_0 * limi_translation_2_0) + (final_omi_rotation_1_0_1 * limi_translation_2_1)) + (final_omi_rotation_1_0_2 * limi_translation_2_2));
    double oMi_translation_to_add_2_1 = (((final_omi_rotation_1_1_0 * limi_translation_2_0) + (final_omi_rotation_1_1_1 * limi_translation_2_1)) + (final_omi_rotation_1_1_2 * limi_translation_2_2));
    double oMi_translation_to_add_2_2 = (((final_omi_rotation_1_2_0 * limi_translation_2_0) + (final_omi_rotation_1_2_1 * limi_translation_2_1)) + (final_omi_rotation_1_2_2 * limi_translation_2_2));
    double oMi_translation_2_0 = (final_omi_translation_1_0 + oMi_translation_to_add_2_0);
    double oMi_translation_2_1 = (final_omi_translation_1_1 + oMi_translation_to_add_2_1);
    double oMi_translation_2_2 = (final_omi_translation_1_2 + oMi_translation_to_add_2_2);
    double final_omi_rotation_2_0_0 = r_10_oMi_rotation_2_0_0;
    double final_omi_rotation_2_0_1 = r_10_oMi_rotation_2_0_1;
    double final_omi_rotation_2_0_2 = r_10_oMi_rotation_2_0_2;
    double final_omi_rotation_2_1_0 = r_10_oMi_rotation_2_1_0;
    double final_omi_rotation_2_1_1 = r_10_oMi_rotation_2_1_1;
    double final_omi_rotation_2_1_2 = r_10_oMi_rotation_2_1_2;
    double final_omi_rotation_2_2_0 = r_10_oMi_rotation_2_2_0;
    double final_omi_rotation_2_2_1 = r_10_oMi_rotation_2_2_1;
    double final_omi_rotation_2_2_2 = r_10_oMi_rotation_2_2_2;
    double final_omi_translation_2_0 = oMi_translation_2_0;
    double final_omi_translation_2_1 = oMi_translation_2_1;
    double final_omi_translation_2_2 = oMi_translation_2_2;
    double temp_v_2_0 = 0;
    double temp_v_2_1 = 0;
    double temp_v_2_2 = 0;
    double temp_v_2_3 = 0;
    double temp_v_2_4 = 0;
    double temp_v_2_5 = v_2;
    double linear_parent_2_0 = final_v_1_0;
    double linear_parent_2_1 = final_v_1_1;
    double linear_parent_2_2 = final_v_1_2;
    double angular_parent_2_0 = final_v_1_3;
    double angular_parent_2_1 = final_v_1_4;
    double angular_parent_2_2 = final_v_1_5;
    double linear_2_0 = temp_v_2_0;
    double linear_2_1 = temp_v_2_1;
    double linear_2_2 = temp_v_2_2;
    double angular_2_0 = temp_v_2_3;
    double angular_2_1 = temp_v_2_4;
    double angular_2_2 = temp_v_2_5;
    double actInv1_2_0 = ((limi_translation_2_1 * angular_parent_2_2) - (limi_translation_2_2 * angular_parent_2_1));
    double actInv1_2_1 = ((limi_translation_2_2 * angular_parent_2_0) - (limi_translation_2_0 * angular_parent_2_2));
    double actInv1_2_2 = ((limi_translation_2_0 * angular_parent_2_1) - (limi_translation_2_1 * angular_parent_2_0));
    double actInv2_2_0 = (linear_parent_2_0 - actInv1_2_0);
    double actInv2_2_1 = (linear_parent_2_1 - actInv1_2_1);
    double actInv2_2_2 = (linear_parent_2_2 - actInv1_2_2);
    double actInv3_2_0_0 = limi_rotation_2_0_0;
    double actInv3_2_1_0 = limi_rotation_2_0_1;
    double actInv3_2_2_0 = limi_rotation_2_0_2;
    double actInv3_2_0_1 = limi_rotation_2_1_0;
    double actInv3_2_1_1 = limi_rotation_2_1_1;
    double actInv3_2_2_1 = limi_rotation_2_1_2;
    double actInv3_2_0_2 = limi_rotation_2_2_0;
    double actInv3_2_1_2 = limi_rotation_2_2_1;
    double actInv3_2_2_2 = limi_rotation_2_2_2;
    double actInv4_2_0 = (((actInv3_2_0_0 * actInv2_2_0) + (actInv3_2_0_1 * actInv2_2_1)) + (actInv3_2_0_2 * actInv2_2_2));
    double actInv4_2_1 = (((actInv3_2_1_0 * actInv2_2_0) + (actInv3_2_1_1 * actInv2_2_1)) + (actInv3_2_1_2 * actInv2_2_2));
    double actInv4_2_2 = (((actInv3_2_2_0 * actInv2_2_0) + (actInv3_2_2_1 * actInv2_2_1)) + (actInv3_2_2_2 * actInv2_2_2));
    double act_inv_linear_2_0 = (linear_2_0 + actInv4_2_0);
    double act_inv_linear_2_1 = (linear_2_1 + actInv4_2_1);
    double act_inv_linear_2_2 = (linear_2_2 + actInv4_2_2);
    double actInv5_2_0 = (((actInv3_2_0_0 * angular_parent_2_0) + (actInv3_2_0_1 * angular_parent_2_1)) + (actInv3_2_0_2 * angular_parent_2_2));
    double actInv5_2_1 = (((actInv3_2_1_0 * angular_parent_2_0) + (actInv3_2_1_1 * angular_parent_2_1)) + (actInv3_2_1_2 * angular_parent_2_2));
    double actInv5_2_2 = (((actInv3_2_2_0 * angular_parent_2_0) + (actInv3_2_2_1 * angular_parent_2_1)) + (actInv3_2_2_2 * angular_parent_2_2));
    double act_inv_angular_2_0 = (angular_2_0 + actInv5_2_0);
    double act_inv_angular_2_1 = (angular_2_1 + actInv5_2_1);
    double act_inv_angular_2_2 = (angular_2_2 + actInv5_2_2);
    double act_inv_res_2_0 = act_inv_linear_2_0;
    double act_inv_res_2_1 = act_inv_linear_2_1;
    double act_inv_res_2_2 = act_inv_linear_2_2;
    double act_inv_res_2_3 = act_inv_angular_2_0;
    double act_inv_res_2_4 = act_inv_angular_2_1;
    double act_inv_res_2_5 = act_inv_angular_2_2;
    double final_v_2_0 = act_inv_res_2_0;
    double final_v_2_1 = act_inv_res_2_1;
    double final_v_2_2 = act_inv_res_2_2;
    double final_v_2_3 = act_inv_res_2_3;
    double final_v_2_4 = act_inv_res_2_4;
    double final_v_2_5 = act_inv_res_2_5;
    double minus_m_w_2 = -(v_2);
    double vin_linear_2_0 = final_v_2_0;
    double vin_linear_2_1 = final_v_2_1;
    double vin_linear_2_2 = final_v_2_2;
    double vin_angular_2_0 = final_v_2_3;
    double vin_angular_2_1 = final_v_2_4;
    double vin_angular_2_2 = final_v_2_5;
    double alpha_cross1_linear_2 = (-(minus_m_w_2) * vin_linear_2_1);
    double alpha_cross2_linear_2 = (minus_m_w_2 * vin_linear_2_0);
    double alpha_cross_linear_2_0 = alpha_cross1_linear_2;
    double alpha_cross_linear_2_1 = alpha_cross2_linear_2;
    double alpha_cross_linear_2_2 = 0;
    double alpha_cross1_angular_2 = (-(minus_m_w_2) * vin_angular_2_1);
    double alpha_cross2_angular_2 = (minus_m_w_2 * vin_angular_2_0);
    double alpha_cross_angular_2_0 = alpha_cross1_angular_2;
    double alpha_cross_angular_2_1 = alpha_cross2_angular_2;
    double alpha_cross_angular_2_2 = 0;
    double alpha_cross_2_0 = alpha_cross_linear_2_0;
    double alpha_cross_2_1 = alpha_cross_linear_2_1;
    double alpha_cross_2_2 = alpha_cross_linear_2_2;
    double alpha_cross_2_3 = alpha_cross_angular_2_0;
    double alpha_cross_2_4 = alpha_cross_angular_2_1;
    double alpha_cross_2_5 = alpha_cross_angular_2_2;
    double temp_a2_2 = (a_2 + alpha_cross_2_5);
    double temp_a3_2_0 = alpha_cross_2_0;
    double temp_a3_2_1 = alpha_cross_2_1;
    double temp_a3_2_2 = alpha_cross_2_2;
    double temp_a3_2_3 = alpha_cross_2_3;
    double temp_a3_2_4 = alpha_cross_2_4;
    double temp_a3_2_5 = temp_a2_2;
    double r_11_linear_parent_2_0 = final_a_1_0;
    double r_11_linear_parent_2_1 = final_a_1_1;
    double r_11_linear_parent_2_2 = final_a_1_2;
    double r_12_angular_parent_2_0 = final_a_1_3;
    double r_12_angular_parent_2_1 = final_a_1_4;
    double r_12_angular_parent_2_2 = final_a_1_5;
    double r_13_actInv1_2_0 = ((limi_translation_2_1 * r_12_angular_parent_2_2) - (limi_translation_2_2 * r_12_angular_parent_2_1));
    double r_13_actInv1_2_1 = ((limi_translation_2_2 * r_12_angular_parent_2_0) - (limi_translation_2_0 * r_12_angular_parent_2_2));
    double r_13_actInv1_2_2 = ((limi_translation_2_0 * r_12_angular_parent_2_1) - (limi_translation_2_1 * r_12_angular_parent_2_0));
    double r_14_actInv2_2_0 = (r_11_linear_parent_2_0 - r_13_actInv1_2_0);
    double r_14_actInv2_2_1 = (r_11_linear_parent_2_1 - r_13_actInv1_2_1);
    double r_14_actInv2_2_2 = (r_11_linear_parent_2_2 - r_13_actInv1_2_2);
    double r_15_actInv3_2_0_0 = limi_rotation_2_0_0;
    double r_15_actInv3_2_1_0 = limi_rotation_2_0_1;
    double r_15_actInv3_2_2_0 = limi_rotation_2_0_2;
    double r_15_actInv3_2_0_1 = limi_rotation_2_1_0;
    double r_15_actInv3_2_1_1 = limi_rotation_2_1_1;
    double r_15_actInv3_2_2_1 = limi_rotation_2_1_2;
    double r_15_actInv3_2_0_2 = limi_rotation_2_2_0;
    double r_15_actInv3_2_1_2 = limi_rotation_2_2_1;
    double r_15_actInv3_2_2_2 = limi_rotation_2_2_2;
    double r_16_actInv4_2_0 = (((r_15_actInv3_2_0_0 * r_14_actInv2_2_0) + (r_15_actInv3_2_0_1 * r_14_actInv2_2_1)) + (r_15_actInv3_2_0_2 * r_14_actInv2_2_2));
    double r_16_actInv4_2_1 = (((r_15_actInv3_2_1_0 * r_14_actInv2_2_0) + (r_15_actInv3_2_1_1 * r_14_actInv2_2_1)) + (r_15_actInv3_2_1_2 * r_14_actInv2_2_2));
    double r_16_actInv4_2_2 = (((r_15_actInv3_2_2_0 * r_14_actInv2_2_0) + (r_15_actInv3_2_2_1 * r_14_actInv2_2_1)) + (r_15_actInv3_2_2_2 * r_14_actInv2_2_2));
    double r_17_actInv5_2_0 = (((r_15_actInv3_2_0_0 * r_12_angular_parent_2_0) + (r_15_actInv3_2_0_1 * r_12_angular_parent_2_1)) + (r_15_actInv3_2_0_2 * r_12_angular_parent_2_2));
    double r_17_actInv5_2_1 = (((r_15_actInv3_2_1_0 * r_12_angular_parent_2_0) + (r_15_actInv3_2_1_1 * r_12_angular_parent_2_1)) + (r_15_actInv3_2_1_2 * r_12_angular_parent_2_2));
    double r_17_actInv5_2_2 = (((r_15_actInv3_2_2_0 * r_12_angular_parent_2_0) + (r_15_actInv3_2_2_1 * r_12_angular_parent_2_1)) + (r_15_actInv3_2_2_2 * r_12_angular_parent_2_2));
    double r_18_act_inv_res_2_0 = r_16_actInv4_2_0;
    double r_18_act_inv_res_2_1 = r_16_actInv4_2_1;
    double r_18_act_inv_res_2_2 = r_16_actInv4_2_2;
    double r_18_act_inv_res_2_3 = r_17_actInv5_2_0;
    double r_18_act_inv_res_2_4 = r_17_actInv5_2_1;
    double r_18_act_inv_res_2_5 = r_17_actInv5_2_2;
    double final_a_2_0 = (temp_a3_2_0 + r_18_act_inv_res_2_0);
    double final_a_2_1 = (temp_a3_2_1 + r_18_act_inv_res_2_1);
    double final_a_2_2 = (temp_a3_2_2 + r_18_act_inv_res_2_2);
    double final_a_2_3 = (temp_a3_2_3 + r_18_act_inv_res_2_3);
    double final_a_2_4 = (temp_a3_2_4 + r_18_act_inv_res_2_4);
    double final_a_2_5 = (temp_a3_2_5 + r_18_act_inv_res_2_5);
    double rotation_matrix_3_0_0 = qcos_3;
    double rotation_matrix_3_0_1 = -(qsin_3);
    double rotation_matrix_3_0_2 = 0;
    double rotation_matrix_3_1_0 = qsin_3;
    double rotation_matrix_3_1_1 = qcos_3;
    double rotation_matrix_3_1_2 = 0;
    double rotation_matrix_3_2_0 = 0;
    double rotation_matrix_3_2_1 = 0;
    double rotation_matrix_3_2_2 = 1;
    double limi_rotation_3_0_0 = rotation_matrix_3_0_0;
    double limi_rotation_3_0_1 = rotation_matrix_3_0_1;
    double limi_rotation_3_0_2 = 0;
    double limi_rotation_3_1_0 = 0;
    double limi_rotation_3_1_1 = 0;
    double limi_rotation_3_1_2 = -1;
    double limi_rotation_3_2_0 = rotation_matrix_3_1_0;
    double limi_rotation_3_2_1 = rotation_matrix_3_1_1;
    double limi_rotation_3_2_2 = 0;
    double oMi_rotation_3_0_0 = (((final_omi_rotation_2_0_0 * limi_rotation_3_0_0) + (final_omi_rotation_2_0_1 * limi_rotation_3_1_0)) + (final_omi_rotation_2_0_2 * limi_rotation_3_2_0));
    double oMi_rotation_3_0_1 = (((final_omi_rotation_2_0_0 * limi_rotation_3_0_1) + (final_omi_rotation_2_0_1 * limi_rotation_3_1_1)) + (final_omi_rotation_2_0_2 * limi_rotation_3_2_1));
    double oMi_rotation_3_0_2 = (((final_omi_rotation_2_0_0 * limi_rotation_3_0_2) + (final_omi_rotation_2_0_1 * limi_rotation_3_1_2)) + (final_omi_rotation_2_0_2 * limi_rotation_3_2_2));
    double oMi_rotation_3_1_0 = (((final_omi_rotation_2_1_0 * limi_rotation_3_0_0) + (final_omi_rotation_2_1_1 * limi_rotation_3_1_0)) + (final_omi_rotation_2_1_2 * limi_rotation_3_2_0));
    double oMi_rotation_3_1_1 = (((final_omi_rotation_2_1_0 * limi_rotation_3_0_1) + (final_omi_rotation_2_1_1 * limi_rotation_3_1_1)) + (final_omi_rotation_2_1_2 * limi_rotation_3_2_1));
    double oMi_rotation_3_1_2 = (((final_omi_rotation_2_1_0 * limi_rotation_3_0_2) + (final_omi_rotation_2_1_1 * limi_rotation_3_1_2)) + (final_omi_rotation_2_1_2 * limi_rotation_3_2_2));
    double oMi_rotation_3_2_0 = (((final_omi_rotation_2_2_0 * limi_rotation_3_0_0) + (final_omi_rotation_2_2_1 * limi_rotation_3_1_0)) + (final_omi_rotation_2_2_2 * limi_rotation_3_2_0));
    double oMi_rotation_3_2_1 = (((final_omi_rotation_2_2_0 * limi_rotation_3_0_1) + (final_omi_rotation_2_2_1 * limi_rotation_3_1_1)) + (final_omi_rotation_2_2_2 * limi_rotation_3_2_1));
    double oMi_rotation_3_2_2 = (((final_omi_rotation_2_2_0 * limi_rotation_3_0_2) + (final_omi_rotation_2_2_1 * limi_rotation_3_1_2)) + (final_omi_rotation_2_2_2 * limi_rotation_3_2_2));
    double r_19_oMi_rotation_3_0_0 = (((final_omi_rotation_2_0_0 * limi_rotation_3_0_0) + (final_omi_rotation_2_0_1 * limi_rotation_3_1_0)) + (final_omi_rotation_2_0_2 * limi_rotation_3_2_0));
    double r_19_oMi_rotation_3_0_1 = (((final_omi_rotation_2_0_0 * limi_rotation_3_0_1) + (final_omi_rotation_2_0_1 * limi_rotation_3_1_1)) + (final_omi_rotation_2_0_2 * limi_rotation_3_2_1));
    double r_19_oMi_rotation_3_0_2 = (((final_omi_rotation_2_0_0 * limi_rotation_3_0_2) + (final_omi_rotation_2_0_1 * limi_rotation_3_1_2)) + (final_omi_rotation_2_0_2 * limi_rotation_3_2_2));
    double r_19_oMi_rotation_3_1_0 = (((final_omi_rotation_2_1_0 * limi_rotation_3_0_0) + (final_omi_rotation_2_1_1 * limi_rotation_3_1_0)) + (final_omi_rotation_2_1_2 * limi_rotation_3_2_0));
    double r_19_oMi_rotation_3_1_1 = (((final_omi_rotation_2_1_0 * limi_rotation_3_0_1) + (final_omi_rotation_2_1_1 * limi_rotation_3_1_1)) + (final_omi_rotation_2_1_2 * limi_rotation_3_2_1));
    double r_19_oMi_rotation_3_1_2 = (((final_omi_rotation_2_1_0 * limi_rotation_3_0_2) + (final_omi_rotation_2_1_1 * limi_rotation_3_1_2)) + (final_omi_rotation_2_1_2 * limi_rotation_3_2_2));
    double r_19_oMi_rotation_3_2_0 = (((final_omi_rotation_2_2_0 * limi_rotation_3_0_0) + (final_omi_rotation_2_2_1 * limi_rotation_3_1_0)) + (final_omi_rotation_2_2_2 * limi_rotation_3_2_0));
    double r_19_oMi_rotation_3_2_1 = (((final_omi_rotation_2_2_0 * limi_rotation_3_0_1) + (final_omi_rotation_2_2_1 * limi_rotation_3_1_1)) + (final_omi_rotation_2_2_2 * limi_rotation_3_2_1));
    double r_19_oMi_rotation_3_2_2 = (((final_omi_rotation_2_2_0 * limi_rotation_3_0_2) + (final_omi_rotation_2_2_1 * limi_rotation_3_1_2)) + (final_omi_rotation_2_2_2 * limi_rotation_3_2_2));
    double oMi_translation_to_add_3_0 = (((final_omi_rotation_2_0_0 * limi_translation_3_0) + (final_omi_rotation_2_0_1 * limi_translation_3_1)) + (final_omi_rotation_2_0_2 * limi_translation_3_2));
    double oMi_translation_to_add_3_1 = (((final_omi_rotation_2_1_0 * limi_translation_3_0) + (final_omi_rotation_2_1_1 * limi_translation_3_1)) + (final_omi_rotation_2_1_2 * limi_translation_3_2));
    double oMi_translation_to_add_3_2 = (((final_omi_rotation_2_2_0 * limi_translation_3_0) + (final_omi_rotation_2_2_1 * limi_translation_3_1)) + (final_omi_rotation_2_2_2 * limi_translation_3_2));
    double oMi_translation_3_0 = (final_omi_translation_2_0 + oMi_translation_to_add_3_0);
    double oMi_translation_3_1 = (final_omi_translation_2_1 + oMi_translation_to_add_3_1);
    double oMi_translation_3_2 = (final_omi_translation_2_2 + oMi_translation_to_add_3_2);
    double final_omi_rotation_3_0_0 = r_19_oMi_rotation_3_0_0;
    double final_omi_rotation_3_0_1 = r_19_oMi_rotation_3_0_1;
    double final_omi_rotation_3_0_2 = r_19_oMi_rotation_3_0_2;
    double final_omi_rotation_3_1_0 = r_19_oMi_rotation_3_1_0;
    double final_omi_rotation_3_1_1 = r_19_oMi_rotation_3_1_1;
    double final_omi_rotation_3_1_2 = r_19_oMi_rotation_3_1_2;
    double final_omi_rotation_3_2_0 = r_19_oMi_rotation_3_2_0;
    double final_omi_rotation_3_2_1 = r_19_oMi_rotation_3_2_1;
    double final_omi_rotation_3_2_2 = r_19_oMi_rotation_3_2_2;
    double final_omi_translation_3_0 = oMi_translation_3_0;
    double final_omi_translation_3_1 = oMi_translation_3_1;
    double final_omi_translation_3_2 = oMi_translation_3_2;
    double temp_v_3_0 = 0;
    double temp_v_3_1 = 0;
    double temp_v_3_2 = 0;
    double temp_v_3_3 = 0;
    double temp_v_3_4 = 0;
    double temp_v_3_5 = v_3;
    double linear_parent_3_0 = final_v_2_0;
    double linear_parent_3_1 = final_v_2_1;
    double linear_parent_3_2 = final_v_2_2;
    double angular_parent_3_0 = final_v_2_3;
    double angular_parent_3_1 = final_v_2_4;
    double angular_parent_3_2 = final_v_2_5;
    double linear_3_0 = temp_v_3_0;
    double linear_3_1 = temp_v_3_1;
    double linear_3_2 = temp_v_3_2;
    double angular_3_0 = temp_v_3_3;
    double angular_3_1 = temp_v_3_4;
    double angular_3_2 = temp_v_3_5;
    double actInv1_3_0 = ((limi_translation_3_1 * angular_parent_3_2) - (limi_translation_3_2 * angular_parent_3_1));
    double actInv1_3_1 = ((limi_translation_3_2 * angular_parent_3_0) - (limi_translation_3_0 * angular_parent_3_2));
    double actInv1_3_2 = ((limi_translation_3_0 * angular_parent_3_1) - (limi_translation_3_1 * angular_parent_3_0));
    double actInv2_3_0 = (linear_parent_3_0 - actInv1_3_0);
    double actInv2_3_1 = (linear_parent_3_1 - actInv1_3_1);
    double actInv2_3_2 = (linear_parent_3_2 - actInv1_3_2);
    double actInv3_3_0_0 = limi_rotation_3_0_0;
    double actInv3_3_1_0 = limi_rotation_3_0_1;
    double actInv3_3_2_0 = limi_rotation_3_0_2;
    double actInv3_3_0_1 = limi_rotation_3_1_0;
    double actInv3_3_1_1 = limi_rotation_3_1_1;
    double actInv3_3_2_1 = limi_rotation_3_1_2;
    double actInv3_3_0_2 = limi_rotation_3_2_0;
    double actInv3_3_1_2 = limi_rotation_3_2_1;
    double actInv3_3_2_2 = limi_rotation_3_2_2;
    double actInv4_3_0 = (((actInv3_3_0_0 * actInv2_3_0) + (actInv3_3_0_1 * actInv2_3_1)) + (actInv3_3_0_2 * actInv2_3_2));
    double actInv4_3_1 = (((actInv3_3_1_0 * actInv2_3_0) + (actInv3_3_1_1 * actInv2_3_1)) + (actInv3_3_1_2 * actInv2_3_2));
    double actInv4_3_2 = (((actInv3_3_2_0 * actInv2_3_0) + (actInv3_3_2_1 * actInv2_3_1)) + (actInv3_3_2_2 * actInv2_3_2));
    double act_inv_linear_3_0 = (linear_3_0 + actInv4_3_0);
    double act_inv_linear_3_1 = (linear_3_1 + actInv4_3_1);
    double act_inv_linear_3_2 = (linear_3_2 + actInv4_3_2);
    double actInv5_3_0 = (((actInv3_3_0_0 * angular_parent_3_0) + (actInv3_3_0_1 * angular_parent_3_1)) + (actInv3_3_0_2 * angular_parent_3_2));
    double actInv5_3_1 = (((actInv3_3_1_0 * angular_parent_3_0) + (actInv3_3_1_1 * angular_parent_3_1)) + (actInv3_3_1_2 * angular_parent_3_2));
    double actInv5_3_2 = (((actInv3_3_2_0 * angular_parent_3_0) + (actInv3_3_2_1 * angular_parent_3_1)) + (actInv3_3_2_2 * angular_parent_3_2));
    double act_inv_angular_3_0 = (angular_3_0 + actInv5_3_0);
    double act_inv_angular_3_1 = (angular_3_1 + actInv5_3_1);
    double act_inv_angular_3_2 = (angular_3_2 + actInv5_3_2);
    double act_inv_res_3_0 = act_inv_linear_3_0;
    double act_inv_res_3_1 = act_inv_linear_3_1;
    double act_inv_res_3_2 = act_inv_linear_3_2;
    double act_inv_res_3_3 = act_inv_angular_3_0;
    double act_inv_res_3_4 = act_inv_angular_3_1;
    double act_inv_res_3_5 = act_inv_angular_3_2;
    double final_v_3_0 = act_inv_res_3_0;
    double final_v_3_1 = act_inv_res_3_1;
    double final_v_3_2 = act_inv_res_3_2;
    double final_v_3_3 = act_inv_res_3_3;
    double final_v_3_4 = act_inv_res_3_4;
    double final_v_3_5 = act_inv_res_3_5;
    double minus_m_w_3 = -(v_3);
    double vin_linear_3_0 = final_v_3_0;
    double vin_linear_3_1 = final_v_3_1;
    double vin_linear_3_2 = final_v_3_2;
    double vin_angular_3_0 = final_v_3_3;
    double vin_angular_3_1 = final_v_3_4;
    double vin_angular_3_2 = final_v_3_5;
    double alpha_cross1_linear_3 = (-(minus_m_w_3) * vin_linear_3_1);
    double alpha_cross2_linear_3 = (minus_m_w_3 * vin_linear_3_0);
    double alpha_cross_linear_3_0 = alpha_cross1_linear_3;
    double alpha_cross_linear_3_1 = alpha_cross2_linear_3;
    double alpha_cross_linear_3_2 = 0;
    double alpha_cross1_angular_3 = (-(minus_m_w_3) * vin_angular_3_1);
    double alpha_cross2_angular_3 = (minus_m_w_3 * vin_angular_3_0);
    double alpha_cross_angular_3_0 = alpha_cross1_angular_3;
    double alpha_cross_angular_3_1 = alpha_cross2_angular_3;
    double alpha_cross_angular_3_2 = 0;
    double alpha_cross_3_0 = alpha_cross_linear_3_0;
    double alpha_cross_3_1 = alpha_cross_linear_3_1;
    double alpha_cross_3_2 = alpha_cross_linear_3_2;
    double alpha_cross_3_3 = alpha_cross_angular_3_0;
    double alpha_cross_3_4 = alpha_cross_angular_3_1;
    double alpha_cross_3_5 = alpha_cross_angular_3_2;
    double temp_a2_3 = (a_3 + alpha_cross_3_5);
    double temp_a3_3_0 = alpha_cross_3_0;
    double temp_a3_3_1 = alpha_cross_3_1;
    double temp_a3_3_2 = alpha_cross_3_2;
    double temp_a3_3_3 = alpha_cross_3_3;
    double temp_a3_3_4 = alpha_cross_3_4;
    double temp_a3_3_5 = temp_a2_3;
    double r_20_linear_parent_3_0 = final_a_2_0;
    double r_20_linear_parent_3_1 = final_a_2_1;
    double r_20_linear_parent_3_2 = final_a_2_2;
    double r_21_angular_parent_3_0 = final_a_2_3;
    double r_21_angular_parent_3_1 = final_a_2_4;
    double r_21_angular_parent_3_2 = final_a_2_5;
    double r_22_actInv1_3_0 = ((limi_translation_3_1 * r_21_angular_parent_3_2) - (limi_translation_3_2 * r_21_angular_parent_3_1));
    double r_22_actInv1_3_1 = ((limi_translation_3_2 * r_21_angular_parent_3_0) - (limi_translation_3_0 * r_21_angular_parent_3_2));
    double r_22_actInv1_3_2 = ((limi_translation_3_0 * r_21_angular_parent_3_1) - (limi_translation_3_1 * r_21_angular_parent_3_0));
    double r_23_actInv2_3_0 = (r_20_linear_parent_3_0 - r_22_actInv1_3_0);
    double r_23_actInv2_3_1 = (r_20_linear_parent_3_1 - r_22_actInv1_3_1);
    double r_23_actInv2_3_2 = (r_20_linear_parent_3_2 - r_22_actInv1_3_2);
    double r_24_actInv3_3_0_0 = limi_rotation_3_0_0;
    double r_24_actInv3_3_1_0 = limi_rotation_3_0_1;
    double r_24_actInv3_3_2_0 = limi_rotation_3_0_2;
    double r_24_actInv3_3_0_1 = limi_rotation_3_1_0;
    double r_24_actInv3_3_1_1 = limi_rotation_3_1_1;
    double r_24_actInv3_3_2_1 = limi_rotation_3_1_2;
    double r_24_actInv3_3_0_2 = limi_rotation_3_2_0;
    double r_24_actInv3_3_1_2 = limi_rotation_3_2_1;
    double r_24_actInv3_3_2_2 = limi_rotation_3_2_2;
    double r_25_actInv4_3_0 = (((r_24_actInv3_3_0_0 * r_23_actInv2_3_0) + (r_24_actInv3_3_0_1 * r_23_actInv2_3_1)) + (r_24_actInv3_3_0_2 * r_23_actInv2_3_2));
    double r_25_actInv4_3_1 = (((r_24_actInv3_3_1_0 * r_23_actInv2_3_0) + (r_24_actInv3_3_1_1 * r_23_actInv2_3_1)) + (r_24_actInv3_3_1_2 * r_23_actInv2_3_2));
    double r_25_actInv4_3_2 = (((r_24_actInv3_3_2_0 * r_23_actInv2_3_0) + (r_24_actInv3_3_2_1 * r_23_actInv2_3_1)) + (r_24_actInv3_3_2_2 * r_23_actInv2_3_2));
    double r_26_actInv5_3_0 = (((r_24_actInv3_3_0_0 * r_21_angular_parent_3_0) + (r_24_actInv3_3_0_1 * r_21_angular_parent_3_1)) + (r_24_actInv3_3_0_2 * r_21_angular_parent_3_2));
    double r_26_actInv5_3_1 = (((r_24_actInv3_3_1_0 * r_21_angular_parent_3_0) + (r_24_actInv3_3_1_1 * r_21_angular_parent_3_1)) + (r_24_actInv3_3_1_2 * r_21_angular_parent_3_2));
    double r_26_actInv5_3_2 = (((r_24_actInv3_3_2_0 * r_21_angular_parent_3_0) + (r_24_actInv3_3_2_1 * r_21_angular_parent_3_1)) + (r_24_actInv3_3_2_2 * r_21_angular_parent_3_2));
    double r_27_act_inv_res_3_0 = r_25_actInv4_3_0;
    double r_27_act_inv_res_3_1 = r_25_actInv4_3_1;
    double r_27_act_inv_res_3_2 = r_25_actInv4_3_2;
    double r_27_act_inv_res_3_3 = r_26_actInv5_3_0;
    double r_27_act_inv_res_3_4 = r_26_actInv5_3_1;
    double r_27_act_inv_res_3_5 = r_26_actInv5_3_2;
    double final_a_3_0 = (temp_a3_3_0 + r_27_act_inv_res_3_0);
    double final_a_3_1 = (temp_a3_3_1 + r_27_act_inv_res_3_1);
    double final_a_3_2 = (temp_a3_3_2 + r_27_act_inv_res_3_2);
    double final_a_3_3 = (temp_a3_3_3 + r_27_act_inv_res_3_3);
    double final_a_3_4 = (temp_a3_3_4 + r_27_act_inv_res_3_4);
    double final_a_3_5 = (temp_a3_3_5 + r_27_act_inv_res_3_5);
    double rotation_matrix_4_0_0 = qcos_4;
    double rotation_matrix_4_0_1 = -(qsin_4);
    double rotation_matrix_4_0_2 = 0;
    double rotation_matrix_4_1_0 = qsin_4;
    double rotation_matrix_4_1_1 = qcos_4;
    double rotation_matrix_4_1_2 = 0;
    double rotation_matrix_4_2_0 = 0;
    double rotation_matrix_4_2_1 = 0;
    double rotation_matrix_4_2_2 = 1;
    double limi_rotation_4_0_0 = rotation_matrix_4_0_0;
    double limi_rotation_4_0_1 = rotation_matrix_4_0_1;
    double limi_rotation_4_0_2 = 0;
    double limi_rotation_4_1_0 = 0;
    double limi_rotation_4_1_1 = 0;
    double limi_rotation_4_1_2 = 1;
    double limi_rotation_4_2_0 = -(rotation_matrix_4_1_0);
    double limi_rotation_4_2_1 = -(rotation_matrix_4_1_1);
    double limi_rotation_4_2_2 = 0;
    double oMi_rotation_4_0_0 = (((final_omi_rotation_3_0_0 * limi_rotation_4_0_0) + (final_omi_rotation_3_0_1 * limi_rotation_4_1_0)) + (final_omi_rotation_3_0_2 * limi_rotation_4_2_0));
    double oMi_rotation_4_0_1 = (((final_omi_rotation_3_0_0 * limi_rotation_4_0_1) + (final_omi_rotation_3_0_1 * limi_rotation_4_1_1)) + (final_omi_rotation_3_0_2 * limi_rotation_4_2_1));
    double oMi_rotation_4_0_2 = (((final_omi_rotation_3_0_0 * limi_rotation_4_0_2) + (final_omi_rotation_3_0_1 * limi_rotation_4_1_2)) + (final_omi_rotation_3_0_2 * limi_rotation_4_2_2));
    double oMi_rotation_4_1_0 = (((final_omi_rotation_3_1_0 * limi_rotation_4_0_0) + (final_omi_rotation_3_1_1 * limi_rotation_4_1_0)) + (final_omi_rotation_3_1_2 * limi_rotation_4_2_0));
    double oMi_rotation_4_1_1 = (((final_omi_rotation_3_1_0 * limi_rotation_4_0_1) + (final_omi_rotation_3_1_1 * limi_rotation_4_1_1)) + (final_omi_rotation_3_1_2 * limi_rotation_4_2_1));
    double oMi_rotation_4_1_2 = (((final_omi_rotation_3_1_0 * limi_rotation_4_0_2) + (final_omi_rotation_3_1_1 * limi_rotation_4_1_2)) + (final_omi_rotation_3_1_2 * limi_rotation_4_2_2));
    double oMi_rotation_4_2_0 = (((final_omi_rotation_3_2_0 * limi_rotation_4_0_0) + (final_omi_rotation_3_2_1 * limi_rotation_4_1_0)) + (final_omi_rotation_3_2_2 * limi_rotation_4_2_0));
    double oMi_rotation_4_2_1 = (((final_omi_rotation_3_2_0 * limi_rotation_4_0_1) + (final_omi_rotation_3_2_1 * limi_rotation_4_1_1)) + (final_omi_rotation_3_2_2 * limi_rotation_4_2_1));
    double oMi_rotation_4_2_2 = (((final_omi_rotation_3_2_0 * limi_rotation_4_0_2) + (final_omi_rotation_3_2_1 * limi_rotation_4_1_2)) + (final_omi_rotation_3_2_2 * limi_rotation_4_2_2));
    double r_28_oMi_rotation_4_0_0 = (((final_omi_rotation_3_0_0 * limi_rotation_4_0_0) + (final_omi_rotation_3_0_1 * limi_rotation_4_1_0)) + (final_omi_rotation_3_0_2 * limi_rotation_4_2_0));
    double r_28_oMi_rotation_4_0_1 = (((final_omi_rotation_3_0_0 * limi_rotation_4_0_1) + (final_omi_rotation_3_0_1 * limi_rotation_4_1_1)) + (final_omi_rotation_3_0_2 * limi_rotation_4_2_1));
    double r_28_oMi_rotation_4_0_2 = (((final_omi_rotation_3_0_0 * limi_rotation_4_0_2) + (final_omi_rotation_3_0_1 * limi_rotation_4_1_2)) + (final_omi_rotation_3_0_2 * limi_rotation_4_2_2));
    double r_28_oMi_rotation_4_1_0 = (((final_omi_rotation_3_1_0 * limi_rotation_4_0_0) + (final_omi_rotation_3_1_1 * limi_rotation_4_1_0)) + (final_omi_rotation_3_1_2 * limi_rotation_4_2_0));
    double r_28_oMi_rotation_4_1_1 = (((final_omi_rotation_3_1_0 * limi_rotation_4_0_1) + (final_omi_rotation_3_1_1 * limi_rotation_4_1_1)) + (final_omi_rotation_3_1_2 * limi_rotation_4_2_1));
    double r_28_oMi_rotation_4_1_2 = (((final_omi_rotation_3_1_0 * limi_rotation_4_0_2) + (final_omi_rotation_3_1_1 * limi_rotation_4_1_2)) + (final_omi_rotation_3_1_2 * limi_rotation_4_2_2));
    double r_28_oMi_rotation_4_2_0 = (((final_omi_rotation_3_2_0 * limi_rotation_4_0_0) + (final_omi_rotation_3_2_1 * limi_rotation_4_1_0)) + (final_omi_rotation_3_2_2 * limi_rotation_4_2_0));
    double r_28_oMi_rotation_4_2_1 = (((final_omi_rotation_3_2_0 * limi_rotation_4_0_1) + (final_omi_rotation_3_2_1 * limi_rotation_4_1_1)) + (final_omi_rotation_3_2_2 * limi_rotation_4_2_1));
    double r_28_oMi_rotation_4_2_2 = (((final_omi_rotation_3_2_0 * limi_rotation_4_0_2) + (final_omi_rotation_3_2_1 * limi_rotation_4_1_2)) + (final_omi_rotation_3_2_2 * limi_rotation_4_2_2));
    double oMi_translation_to_add_4_0 = (((final_omi_rotation_3_0_0 * limi_translation_4_0) + (final_omi_rotation_3_0_1 * limi_translation_4_1)) + (final_omi_rotation_3_0_2 * limi_translation_4_2));
    double oMi_translation_to_add_4_1 = (((final_omi_rotation_3_1_0 * limi_translation_4_0) + (final_omi_rotation_3_1_1 * limi_translation_4_1)) + (final_omi_rotation_3_1_2 * limi_translation_4_2));
    double oMi_translation_to_add_4_2 = (((final_omi_rotation_3_2_0 * limi_translation_4_0) + (final_omi_rotation_3_2_1 * limi_translation_4_1)) + (final_omi_rotation_3_2_2 * limi_translation_4_2));
    double oMi_translation_4_0 = (final_omi_translation_3_0 + oMi_translation_to_add_4_0);
    double oMi_translation_4_1 = (final_omi_translation_3_1 + oMi_translation_to_add_4_1);
    double oMi_translation_4_2 = (final_omi_translation_3_2 + oMi_translation_to_add_4_2);
    double final_omi_rotation_4_0_0 = r_28_oMi_rotation_4_0_0;
    double final_omi_rotation_4_0_1 = r_28_oMi_rotation_4_0_1;
    double final_omi_rotation_4_0_2 = r_28_oMi_rotation_4_0_2;
    double final_omi_rotation_4_1_0 = r_28_oMi_rotation_4_1_0;
    double final_omi_rotation_4_1_1 = r_28_oMi_rotation_4_1_1;
    double final_omi_rotation_4_1_2 = r_28_oMi_rotation_4_1_2;
    double final_omi_rotation_4_2_0 = r_28_oMi_rotation_4_2_0;
    double final_omi_rotation_4_2_1 = r_28_oMi_rotation_4_2_1;
    double final_omi_rotation_4_2_2 = r_28_oMi_rotation_4_2_2;
    double final_omi_translation_4_0 = oMi_translation_4_0;
    double final_omi_translation_4_1 = oMi_translation_4_1;
    double final_omi_translation_4_2 = oMi_translation_4_2;
    double temp_v_4_0 = 0;
    double temp_v_4_1 = 0;
    double temp_v_4_2 = 0;
    double temp_v_4_3 = 0;
    double temp_v_4_4 = 0;
    double temp_v_4_5 = v_4;
    double linear_parent_4_0 = final_v_3_0;
    double linear_parent_4_1 = final_v_3_1;
    double linear_parent_4_2 = final_v_3_2;
    double angular_parent_4_0 = final_v_3_3;
    double angular_parent_4_1 = final_v_3_4;
    double angular_parent_4_2 = final_v_3_5;
    double linear_4_0 = temp_v_4_0;
    double linear_4_1 = temp_v_4_1;
    double linear_4_2 = temp_v_4_2;
    double angular_4_0 = temp_v_4_3;
    double angular_4_1 = temp_v_4_4;
    double angular_4_2 = temp_v_4_5;
    double actInv1_4_0 = ((limi_translation_4_1 * angular_parent_4_2) - (limi_translation_4_2 * angular_parent_4_1));
    double actInv1_4_1 = ((limi_translation_4_2 * angular_parent_4_0) - (limi_translation_4_0 * angular_parent_4_2));
    double actInv1_4_2 = ((limi_translation_4_0 * angular_parent_4_1) - (limi_translation_4_1 * angular_parent_4_0));
    double actInv2_4_0 = (linear_parent_4_0 - actInv1_4_0);
    double actInv2_4_1 = (linear_parent_4_1 - actInv1_4_1);
    double actInv2_4_2 = (linear_parent_4_2 - actInv1_4_2);
    double actInv3_4_0_0 = limi_rotation_4_0_0;
    double actInv3_4_1_0 = limi_rotation_4_0_1;
    double actInv3_4_2_0 = limi_rotation_4_0_2;
    double actInv3_4_0_1 = limi_rotation_4_1_0;
    double actInv3_4_1_1 = limi_rotation_4_1_1;
    double actInv3_4_2_1 = limi_rotation_4_1_2;
    double actInv3_4_0_2 = limi_rotation_4_2_0;
    double actInv3_4_1_2 = limi_rotation_4_2_1;
    double actInv3_4_2_2 = limi_rotation_4_2_2;
    double actInv4_4_0 = (((actInv3_4_0_0 * actInv2_4_0) + (actInv3_4_0_1 * actInv2_4_1)) + (actInv3_4_0_2 * actInv2_4_2));
    double actInv4_4_1 = (((actInv3_4_1_0 * actInv2_4_0) + (actInv3_4_1_1 * actInv2_4_1)) + (actInv3_4_1_2 * actInv2_4_2));
    double actInv4_4_2 = (((actInv3_4_2_0 * actInv2_4_0) + (actInv3_4_2_1 * actInv2_4_1)) + (actInv3_4_2_2 * actInv2_4_2));
    double act_inv_linear_4_0 = (linear_4_0 + actInv4_4_0);
    double act_inv_linear_4_1 = (linear_4_1 + actInv4_4_1);
    double act_inv_linear_4_2 = (linear_4_2 + actInv4_4_2);
    double actInv5_4_0 = (((actInv3_4_0_0 * angular_parent_4_0) + (actInv3_4_0_1 * angular_parent_4_1)) + (actInv3_4_0_2 * angular_parent_4_2));
    double actInv5_4_1 = (((actInv3_4_1_0 * angular_parent_4_0) + (actInv3_4_1_1 * angular_parent_4_1)) + (actInv3_4_1_2 * angular_parent_4_2));
    double actInv5_4_2 = (((actInv3_4_2_0 * angular_parent_4_0) + (actInv3_4_2_1 * angular_parent_4_1)) + (actInv3_4_2_2 * angular_parent_4_2));
    double act_inv_angular_4_0 = (angular_4_0 + actInv5_4_0);
    double act_inv_angular_4_1 = (angular_4_1 + actInv5_4_1);
    double act_inv_angular_4_2 = (angular_4_2 + actInv5_4_2);
    double act_inv_res_4_0 = act_inv_linear_4_0;
    double act_inv_res_4_1 = act_inv_linear_4_1;
    double act_inv_res_4_2 = act_inv_linear_4_2;
    double act_inv_res_4_3 = act_inv_angular_4_0;
    double act_inv_res_4_4 = act_inv_angular_4_1;
    double act_inv_res_4_5 = act_inv_angular_4_2;
    double final_v_4_0 = act_inv_res_4_0;
    double final_v_4_1 = act_inv_res_4_1;
    double final_v_4_2 = act_inv_res_4_2;
    double final_v_4_3 = act_inv_res_4_3;
    double final_v_4_4 = act_inv_res_4_4;
    double final_v_4_5 = act_inv_res_4_5;
    double minus_m_w_4 = -(v_4);
    double vin_linear_4_0 = final_v_4_0;
    double vin_linear_4_1 = final_v_4_1;
    double vin_linear_4_2 = final_v_4_2;
    double vin_angular_4_0 = final_v_4_3;
    double vin_angular_4_1 = final_v_4_4;
    double vin_angular_4_2 = final_v_4_5;
    double alpha_cross1_linear_4 = (-(minus_m_w_4) * vin_linear_4_1);
    double alpha_cross2_linear_4 = (minus_m_w_4 * vin_linear_4_0);
    double alpha_cross_linear_4_0 = alpha_cross1_linear_4;
    double alpha_cross_linear_4_1 = alpha_cross2_linear_4;
    double alpha_cross_linear_4_2 = 0;
    double alpha_cross1_angular_4 = (-(minus_m_w_4) * vin_angular_4_1);
    double alpha_cross2_angular_4 = (minus_m_w_4 * vin_angular_4_0);
    double alpha_cross_angular_4_0 = alpha_cross1_angular_4;
    double alpha_cross_angular_4_1 = alpha_cross2_angular_4;
    double alpha_cross_angular_4_2 = 0;
    double alpha_cross_4_0 = alpha_cross_linear_4_0;
    double alpha_cross_4_1 = alpha_cross_linear_4_1;
    double alpha_cross_4_2 = alpha_cross_linear_4_2;
    double alpha_cross_4_3 = alpha_cross_angular_4_0;
    double alpha_cross_4_4 = alpha_cross_angular_4_1;
    double alpha_cross_4_5 = alpha_cross_angular_4_2;
    double temp_a2_4 = (a_4 + alpha_cross_4_5);
    double temp_a3_4_0 = alpha_cross_4_0;
    double temp_a3_4_1 = alpha_cross_4_1;
    double temp_a3_4_2 = alpha_cross_4_2;
    double temp_a3_4_3 = alpha_cross_4_3;
    double temp_a3_4_4 = alpha_cross_4_4;
    double temp_a3_4_5 = temp_a2_4;
    double r_29_linear_parent_4_0 = final_a_3_0;
    double r_29_linear_parent_4_1 = final_a_3_1;
    double r_29_linear_parent_4_2 = final_a_3_2;
    double r_30_angular_parent_4_0 = final_a_3_3;
    double r_30_angular_parent_4_1 = final_a_3_4;
    double r_30_angular_parent_4_2 = final_a_3_5;
    double r_31_actInv1_4_0 = ((limi_translation_4_1 * r_30_angular_parent_4_2) - (limi_translation_4_2 * r_30_angular_parent_4_1));
    double r_31_actInv1_4_1 = ((limi_translation_4_2 * r_30_angular_parent_4_0) - (limi_translation_4_0 * r_30_angular_parent_4_2));
    double r_31_actInv1_4_2 = ((limi_translation_4_0 * r_30_angular_parent_4_1) - (limi_translation_4_1 * r_30_angular_parent_4_0));
    double r_32_actInv2_4_0 = (r_29_linear_parent_4_0 - r_31_actInv1_4_0);
    double r_32_actInv2_4_1 = (r_29_linear_parent_4_1 - r_31_actInv1_4_1);
    double r_32_actInv2_4_2 = (r_29_linear_parent_4_2 - r_31_actInv1_4_2);
    double r_33_actInv3_4_0_0 = limi_rotation_4_0_0;
    double r_33_actInv3_4_1_0 = limi_rotation_4_0_1;
    double r_33_actInv3_4_2_0 = limi_rotation_4_0_2;
    double r_33_actInv3_4_0_1 = limi_rotation_4_1_0;
    double r_33_actInv3_4_1_1 = limi_rotation_4_1_1;
    double r_33_actInv3_4_2_1 = limi_rotation_4_1_2;
    double r_33_actInv3_4_0_2 = limi_rotation_4_2_0;
    double r_33_actInv3_4_1_2 = limi_rotation_4_2_1;
    double r_33_actInv3_4_2_2 = limi_rotation_4_2_2;
    double r_34_actInv4_4_0 = (((r_33_actInv3_4_0_0 * r_32_actInv2_4_0) + (r_33_actInv3_4_0_1 * r_32_actInv2_4_1)) + (r_33_actInv3_4_0_2 * r_32_actInv2_4_2));
    double r_34_actInv4_4_1 = (((r_33_actInv3_4_1_0 * r_32_actInv2_4_0) + (r_33_actInv3_4_1_1 * r_32_actInv2_4_1)) + (r_33_actInv3_4_1_2 * r_32_actInv2_4_2));
    double r_34_actInv4_4_2 = (((r_33_actInv3_4_2_0 * r_32_actInv2_4_0) + (r_33_actInv3_4_2_1 * r_32_actInv2_4_1)) + (r_33_actInv3_4_2_2 * r_32_actInv2_4_2));
    double r_35_actInv5_4_0 = (((r_33_actInv3_4_0_0 * r_30_angular_parent_4_0) + (r_33_actInv3_4_0_1 * r_30_angular_parent_4_1)) + (r_33_actInv3_4_0_2 * r_30_angular_parent_4_2));
    double r_35_actInv5_4_1 = (((r_33_actInv3_4_1_0 * r_30_angular_parent_4_0) + (r_33_actInv3_4_1_1 * r_30_angular_parent_4_1)) + (r_33_actInv3_4_1_2 * r_30_angular_parent_4_2));
    double r_35_actInv5_4_2 = (((r_33_actInv3_4_2_0 * r_30_angular_parent_4_0) + (r_33_actInv3_4_2_1 * r_30_angular_parent_4_1)) + (r_33_actInv3_4_2_2 * r_30_angular_parent_4_2));
    double r_36_act_inv_res_4_0 = r_34_actInv4_4_0;
    double r_36_act_inv_res_4_1 = r_34_actInv4_4_1;
    double r_36_act_inv_res_4_2 = r_34_actInv4_4_2;
    double r_36_act_inv_res_4_3 = r_35_actInv5_4_0;
    double r_36_act_inv_res_4_4 = r_35_actInv5_4_1;
    double r_36_act_inv_res_4_5 = r_35_actInv5_4_2;
    double final_a_4_0 = (temp_a3_4_0 + r_36_act_inv_res_4_0);
    double final_a_4_1 = (temp_a3_4_1 + r_36_act_inv_res_4_1);
    double final_a_4_2 = (temp_a3_4_2 + r_36_act_inv_res_4_2);
    double final_a_4_3 = (temp_a3_4_3 + r_36_act_inv_res_4_3);
    double final_a_4_4 = (temp_a3_4_4 + r_36_act_inv_res_4_4);
    double final_a_4_5 = (temp_a3_4_5 + r_36_act_inv_res_4_5);
    double rotation_matrix_5_0_0 = qcos_5;
    double rotation_matrix_5_0_1 = -(qsin_5);
    double rotation_matrix_5_0_2 = 0;
    double rotation_matrix_5_1_0 = qsin_5;
    double rotation_matrix_5_1_1 = qcos_5;
    double rotation_matrix_5_1_2 = 0;
    double rotation_matrix_5_2_0 = 0;
    double rotation_matrix_5_2_1 = 0;
    double rotation_matrix_5_2_2 = 1;
    double limi_rotation_5_0_0 = rotation_matrix_5_0_0;
    double limi_rotation_5_0_1 = rotation_matrix_5_0_1;
    double limi_rotation_5_0_2 = 0;
    double limi_rotation_5_1_0 = 0;
    double limi_rotation_5_1_1 = 0;
    double limi_rotation_5_1_2 = -1;
    double limi_rotation_5_2_0 = rotation_matrix_5_1_0;
    double limi_rotation_5_2_1 = rotation_matrix_5_1_1;
    double limi_rotation_5_2_2 = 0;
    double oMi_rotation_5_0_0 = (((final_omi_rotation_4_0_0 * limi_rotation_5_0_0) + (final_omi_rotation_4_0_1 * limi_rotation_5_1_0)) + (final_omi_rotation_4_0_2 * limi_rotation_5_2_0));
    double oMi_rotation_5_0_1 = (((final_omi_rotation_4_0_0 * limi_rotation_5_0_1) + (final_omi_rotation_4_0_1 * limi_rotation_5_1_1)) + (final_omi_rotation_4_0_2 * limi_rotation_5_2_1));
    double oMi_rotation_5_0_2 = (((final_omi_rotation_4_0_0 * limi_rotation_5_0_2) + (final_omi_rotation_4_0_1 * limi_rotation_5_1_2)) + (final_omi_rotation_4_0_2 * limi_rotation_5_2_2));
    double oMi_rotation_5_1_0 = (((final_omi_rotation_4_1_0 * limi_rotation_5_0_0) + (final_omi_rotation_4_1_1 * limi_rotation_5_1_0)) + (final_omi_rotation_4_1_2 * limi_rotation_5_2_0));
    double oMi_rotation_5_1_1 = (((final_omi_rotation_4_1_0 * limi_rotation_5_0_1) + (final_omi_rotation_4_1_1 * limi_rotation_5_1_1)) + (final_omi_rotation_4_1_2 * limi_rotation_5_2_1));
    double oMi_rotation_5_1_2 = (((final_omi_rotation_4_1_0 * limi_rotation_5_0_2) + (final_omi_rotation_4_1_1 * limi_rotation_5_1_2)) + (final_omi_rotation_4_1_2 * limi_rotation_5_2_2));
    double oMi_rotation_5_2_0 = (((final_omi_rotation_4_2_0 * limi_rotation_5_0_0) + (final_omi_rotation_4_2_1 * limi_rotation_5_1_0)) + (final_omi_rotation_4_2_2 * limi_rotation_5_2_0));
    double oMi_rotation_5_2_1 = (((final_omi_rotation_4_2_0 * limi_rotation_5_0_1) + (final_omi_rotation_4_2_1 * limi_rotation_5_1_1)) + (final_omi_rotation_4_2_2 * limi_rotation_5_2_1));
    double oMi_rotation_5_2_2 = (((final_omi_rotation_4_2_0 * limi_rotation_5_0_2) + (final_omi_rotation_4_2_1 * limi_rotation_5_1_2)) + (final_omi_rotation_4_2_2 * limi_rotation_5_2_2));
    double r_37_oMi_rotation_5_0_0 = (((final_omi_rotation_4_0_0 * limi_rotation_5_0_0) + (final_omi_rotation_4_0_1 * limi_rotation_5_1_0)) + (final_omi_rotation_4_0_2 * limi_rotation_5_2_0));
    double r_37_oMi_rotation_5_0_1 = (((final_omi_rotation_4_0_0 * limi_rotation_5_0_1) + (final_omi_rotation_4_0_1 * limi_rotation_5_1_1)) + (final_omi_rotation_4_0_2 * limi_rotation_5_2_1));
    double r_37_oMi_rotation_5_0_2 = (((final_omi_rotation_4_0_0 * limi_rotation_5_0_2) + (final_omi_rotation_4_0_1 * limi_rotation_5_1_2)) + (final_omi_rotation_4_0_2 * limi_rotation_5_2_2));
    double r_37_oMi_rotation_5_1_0 = (((final_omi_rotation_4_1_0 * limi_rotation_5_0_0) + (final_omi_rotation_4_1_1 * limi_rotation_5_1_0)) + (final_omi_rotation_4_1_2 * limi_rotation_5_2_0));
    double r_37_oMi_rotation_5_1_1 = (((final_omi_rotation_4_1_0 * limi_rotation_5_0_1) + (final_omi_rotation_4_1_1 * limi_rotation_5_1_1)) + (final_omi_rotation_4_1_2 * limi_rotation_5_2_1));
    double r_37_oMi_rotation_5_1_2 = (((final_omi_rotation_4_1_0 * limi_rotation_5_0_2) + (final_omi_rotation_4_1_1 * limi_rotation_5_1_2)) + (final_omi_rotation_4_1_2 * limi_rotation_5_2_2));
    double r_37_oMi_rotation_5_2_0 = (((final_omi_rotation_4_2_0 * limi_rotation_5_0_0) + (final_omi_rotation_4_2_1 * limi_rotation_5_1_0)) + (final_omi_rotation_4_2_2 * limi_rotation_5_2_0));
    double r_37_oMi_rotation_5_2_1 = (((final_omi_rotation_4_2_0 * limi_rotation_5_0_1) + (final_omi_rotation_4_2_1 * limi_rotation_5_1_1)) + (final_omi_rotation_4_2_2 * limi_rotation_5_2_1));
    double r_37_oMi_rotation_5_2_2 = (((final_omi_rotation_4_2_0 * limi_rotation_5_0_2) + (final_omi_rotation_4_2_1 * limi_rotation_5_1_2)) + (final_omi_rotation_4_2_2 * limi_rotation_5_2_2));
    double oMi_translation_to_add_5_0 = (((final_omi_rotation_4_0_0 * limi_translation_5_0) + (final_omi_rotation_4_0_1 * limi_translation_5_1)) + (final_omi_rotation_4_0_2 * limi_translation_5_2));
    double oMi_translation_to_add_5_1 = (((final_omi_rotation_4_1_0 * limi_translation_5_0) + (final_omi_rotation_4_1_1 * limi_translation_5_1)) + (final_omi_rotation_4_1_2 * limi_translation_5_2));
    double oMi_translation_to_add_5_2 = (((final_omi_rotation_4_2_0 * limi_translation_5_0) + (final_omi_rotation_4_2_1 * limi_translation_5_1)) + (final_omi_rotation_4_2_2 * limi_translation_5_2));
    double oMi_translation_5_0 = (final_omi_translation_4_0 + oMi_translation_to_add_5_0);
    double oMi_translation_5_1 = (final_omi_translation_4_1 + oMi_translation_to_add_5_1);
    double oMi_translation_5_2 = (final_omi_translation_4_2 + oMi_translation_to_add_5_2);
    double final_omi_rotation_5_0_0 = r_37_oMi_rotation_5_0_0;
    double final_omi_rotation_5_0_1 = r_37_oMi_rotation_5_0_1;
    double final_omi_rotation_5_0_2 = r_37_oMi_rotation_5_0_2;
    double final_omi_rotation_5_1_0 = r_37_oMi_rotation_5_1_0;
    double final_omi_rotation_5_1_1 = r_37_oMi_rotation_5_1_1;
    double final_omi_rotation_5_1_2 = r_37_oMi_rotation_5_1_2;
    double final_omi_rotation_5_2_0 = r_37_oMi_rotation_5_2_0;
    double final_omi_rotation_5_2_1 = r_37_oMi_rotation_5_2_1;
    double final_omi_rotation_5_2_2 = r_37_oMi_rotation_5_2_2;
    double final_omi_translation_5_0 = oMi_translation_5_0;
    double final_omi_translation_5_1 = oMi_translation_5_1;
    double final_omi_translation_5_2 = oMi_translation_5_2;
    double temp_v_5_0 = 0;
    double temp_v_5_1 = 0;
    double temp_v_5_2 = 0;
    double temp_v_5_3 = 0;
    double temp_v_5_4 = 0;
    double temp_v_5_5 = v_5;
    double linear_parent_5_0 = final_v_4_0;
    double linear_parent_5_1 = final_v_4_1;
    double linear_parent_5_2 = final_v_4_2;
    double angular_parent_5_0 = final_v_4_3;
    double angular_parent_5_1 = final_v_4_4;
    double angular_parent_5_2 = final_v_4_5;
    double linear_5_0 = temp_v_5_0;
    double linear_5_1 = temp_v_5_1;
    double linear_5_2 = temp_v_5_2;
    double angular_5_0 = temp_v_5_3;
    double angular_5_1 = temp_v_5_4;
    double angular_5_2 = temp_v_5_5;
    double actInv1_5_0 = ((limi_translation_5_1 * angular_parent_5_2) - (limi_translation_5_2 * angular_parent_5_1));
    double actInv1_5_1 = ((limi_translation_5_2 * angular_parent_5_0) - (limi_translation_5_0 * angular_parent_5_2));
    double actInv1_5_2 = ((limi_translation_5_0 * angular_parent_5_1) - (limi_translation_5_1 * angular_parent_5_0));
    double actInv2_5_0 = (linear_parent_5_0 - actInv1_5_0);
    double actInv2_5_1 = (linear_parent_5_1 - actInv1_5_1);
    double actInv2_5_2 = (linear_parent_5_2 - actInv1_5_2);
    double actInv3_5_0_0 = limi_rotation_5_0_0;
    double actInv3_5_1_0 = limi_rotation_5_0_1;
    double actInv3_5_2_0 = limi_rotation_5_0_2;
    double actInv3_5_0_1 = limi_rotation_5_1_0;
    double actInv3_5_1_1 = limi_rotation_5_1_1;
    double actInv3_5_2_1 = limi_rotation_5_1_2;
    double actInv3_5_0_2 = limi_rotation_5_2_0;
    double actInv3_5_1_2 = limi_rotation_5_2_1;
    double actInv3_5_2_2 = limi_rotation_5_2_2;
    double actInv4_5_0 = (((actInv3_5_0_0 * actInv2_5_0) + (actInv3_5_0_1 * actInv2_5_1)) + (actInv3_5_0_2 * actInv2_5_2));
    double actInv4_5_1 = (((actInv3_5_1_0 * actInv2_5_0) + (actInv3_5_1_1 * actInv2_5_1)) + (actInv3_5_1_2 * actInv2_5_2));
    double actInv4_5_2 = (((actInv3_5_2_0 * actInv2_5_0) + (actInv3_5_2_1 * actInv2_5_1)) + (actInv3_5_2_2 * actInv2_5_2));
    double act_inv_linear_5_0 = (linear_5_0 + actInv4_5_0);
    double act_inv_linear_5_1 = (linear_5_1 + actInv4_5_1);
    double act_inv_linear_5_2 = (linear_5_2 + actInv4_5_2);
    double actInv5_5_0 = (((actInv3_5_0_0 * angular_parent_5_0) + (actInv3_5_0_1 * angular_parent_5_1)) + (actInv3_5_0_2 * angular_parent_5_2));
    double actInv5_5_1 = (((actInv3_5_1_0 * angular_parent_5_0) + (actInv3_5_1_1 * angular_parent_5_1)) + (actInv3_5_1_2 * angular_parent_5_2));
    double actInv5_5_2 = (((actInv3_5_2_0 * angular_parent_5_0) + (actInv3_5_2_1 * angular_parent_5_1)) + (actInv3_5_2_2 * angular_parent_5_2));
    double act_inv_angular_5_0 = (angular_5_0 + actInv5_5_0);
    double act_inv_angular_5_1 = (angular_5_1 + actInv5_5_1);
    double act_inv_angular_5_2 = (angular_5_2 + actInv5_5_2);
    double act_inv_res_5_0 = act_inv_linear_5_0;
    double act_inv_res_5_1 = act_inv_linear_5_1;
    double act_inv_res_5_2 = act_inv_linear_5_2;
    double act_inv_res_5_3 = act_inv_angular_5_0;
    double act_inv_res_5_4 = act_inv_angular_5_1;
    double act_inv_res_5_5 = act_inv_angular_5_2;
    double final_v_5_0 = act_inv_res_5_0;
    double final_v_5_1 = act_inv_res_5_1;
    double final_v_5_2 = act_inv_res_5_2;
    double final_v_5_3 = act_inv_res_5_3;
    double final_v_5_4 = act_inv_res_5_4;
    double final_v_5_5 = act_inv_res_5_5;
    double minus_m_w_5 = -(v_5);
    double vin_linear_5_0 = final_v_5_0;
    double vin_linear_5_1 = final_v_5_1;
    double vin_linear_5_2 = final_v_5_2;
    double vin_angular_5_0 = final_v_5_3;
    double vin_angular_5_1 = final_v_5_4;
    double vin_angular_5_2 = final_v_5_5;
    double alpha_cross1_linear_5 = (-(minus_m_w_5) * vin_linear_5_1);
    double alpha_cross2_linear_5 = (minus_m_w_5 * vin_linear_5_0);
    double alpha_cross_linear_5_0 = alpha_cross1_linear_5;
    double alpha_cross_linear_5_1 = alpha_cross2_linear_5;
    double alpha_cross_linear_5_2 = 0;
    double alpha_cross1_angular_5 = (-(minus_m_w_5) * vin_angular_5_1);
    double alpha_cross2_angular_5 = (minus_m_w_5 * vin_angular_5_0);
    double alpha_cross_angular_5_0 = alpha_cross1_angular_5;
    double alpha_cross_angular_5_1 = alpha_cross2_angular_5;
    double alpha_cross_angular_5_2 = 0;
    double alpha_cross_5_0 = alpha_cross_linear_5_0;
    double alpha_cross_5_1 = alpha_cross_linear_5_1;
    double alpha_cross_5_2 = alpha_cross_linear_5_2;
    double alpha_cross_5_3 = alpha_cross_angular_5_0;
    double alpha_cross_5_4 = alpha_cross_angular_5_1;
    double alpha_cross_5_5 = alpha_cross_angular_5_2;
    double temp_a2_5 = (a_5 + alpha_cross_5_5);
    double temp_a3_5_0 = alpha_cross_5_0;
    double temp_a3_5_1 = alpha_cross_5_1;
    double temp_a3_5_2 = alpha_cross_5_2;
    double temp_a3_5_3 = alpha_cross_5_3;
    double temp_a3_5_4 = alpha_cross_5_4;
    double temp_a3_5_5 = temp_a2_5;
    double r_38_linear_parent_5_0 = final_a_4_0;
    double r_38_linear_parent_5_1 = final_a_4_1;
    double r_38_linear_parent_5_2 = final_a_4_2;
    double r_39_angular_parent_5_0 = final_a_4_3;
    double r_39_angular_parent_5_1 = final_a_4_4;
    double r_39_angular_parent_5_2 = final_a_4_5;
    double r_40_actInv1_5_0 = ((limi_translation_5_1 * r_39_angular_parent_5_2) - (limi_translation_5_2 * r_39_angular_parent_5_1));
    double r_40_actInv1_5_1 = ((limi_translation_5_2 * r_39_angular_parent_5_0) - (limi_translation_5_0 * r_39_angular_parent_5_2));
    double r_40_actInv1_5_2 = ((limi_translation_5_0 * r_39_angular_parent_5_1) - (limi_translation_5_1 * r_39_angular_parent_5_0));
    double r_41_actInv2_5_0 = (r_38_linear_parent_5_0 - r_40_actInv1_5_0);
    double r_41_actInv2_5_1 = (r_38_linear_parent_5_1 - r_40_actInv1_5_1);
    double r_41_actInv2_5_2 = (r_38_linear_parent_5_2 - r_40_actInv1_5_2);
    double r_42_actInv3_5_0_0 = limi_rotation_5_0_0;
    double r_42_actInv3_5_1_0 = limi_rotation_5_0_1;
    double r_42_actInv3_5_2_0 = limi_rotation_5_0_2;
    double r_42_actInv3_5_0_1 = limi_rotation_5_1_0;
    double r_42_actInv3_5_1_1 = limi_rotation_5_1_1;
    double r_42_actInv3_5_2_1 = limi_rotation_5_1_2;
    double r_42_actInv3_5_0_2 = limi_rotation_5_2_0;
    double r_42_actInv3_5_1_2 = limi_rotation_5_2_1;
    double r_42_actInv3_5_2_2 = limi_rotation_5_2_2;
    double r_43_actInv4_5_0 = (((r_42_actInv3_5_0_0 * r_41_actInv2_5_0) + (r_42_actInv3_5_0_1 * r_41_actInv2_5_1)) + (r_42_actInv3_5_0_2 * r_41_actInv2_5_2));
    double r_43_actInv4_5_1 = (((r_42_actInv3_5_1_0 * r_41_actInv2_5_0) + (r_42_actInv3_5_1_1 * r_41_actInv2_5_1)) + (r_42_actInv3_5_1_2 * r_41_actInv2_5_2));
    double r_43_actInv4_5_2 = (((r_42_actInv3_5_2_0 * r_41_actInv2_5_0) + (r_42_actInv3_5_2_1 * r_41_actInv2_5_1)) + (r_42_actInv3_5_2_2 * r_41_actInv2_5_2));
    double r_44_actInv5_5_0 = (((r_42_actInv3_5_0_0 * r_39_angular_parent_5_0) + (r_42_actInv3_5_0_1 * r_39_angular_parent_5_1)) + (r_42_actInv3_5_0_2 * r_39_angular_parent_5_2));
    double r_44_actInv5_5_1 = (((r_42_actInv3_5_1_0 * r_39_angular_parent_5_0) + (r_42_actInv3_5_1_1 * r_39_angular_parent_5_1)) + (r_42_actInv3_5_1_2 * r_39_angular_parent_5_2));
    double r_44_actInv5_5_2 = (((r_42_actInv3_5_2_0 * r_39_angular_parent_5_0) + (r_42_actInv3_5_2_1 * r_39_angular_parent_5_1)) + (r_42_actInv3_5_2_2 * r_39_angular_parent_5_2));
    double r_45_act_inv_res_5_0 = r_43_actInv4_5_0;
    double r_45_act_inv_res_5_1 = r_43_actInv4_5_1;
    double r_45_act_inv_res_5_2 = r_43_actInv4_5_2;
    double r_45_act_inv_res_5_3 = r_44_actInv5_5_0;
    double r_45_act_inv_res_5_4 = r_44_actInv5_5_1;
    double r_45_act_inv_res_5_5 = r_44_actInv5_5_2;
    double final_a_5_0 = (temp_a3_5_0 + r_45_act_inv_res_5_0);
    double final_a_5_1 = (temp_a3_5_1 + r_45_act_inv_res_5_1);
    double final_a_5_2 = (temp_a3_5_2 + r_45_act_inv_res_5_2);
    double final_a_5_3 = (temp_a3_5_3 + r_45_act_inv_res_5_3);
    double final_a_5_4 = (temp_a3_5_4 + r_45_act_inv_res_5_4);
    double final_a_5_5 = (temp_a3_5_5 + r_45_act_inv_res_5_5);
    double rotation_matrix_6_0_0 = qcos_6;
    double rotation_matrix_6_0_1 = -(qsin_6);
    double rotation_matrix_6_0_2 = 0;
    double rotation_matrix_6_1_0 = qsin_6;
    double rotation_matrix_6_1_1 = qcos_6;
    double rotation_matrix_6_1_2 = 0;
    double rotation_matrix_6_2_0 = 0;
    double rotation_matrix_6_2_1 = 0;
    double rotation_matrix_6_2_2 = 1;
    double limi_rotation_6_0_0 = rotation_matrix_6_0_0;
    double limi_rotation_6_0_1 = rotation_matrix_6_0_1;
    double limi_rotation_6_0_2 = 0;
    double limi_rotation_6_1_0 = 0;
    double limi_rotation_6_1_1 = 0;
    double limi_rotation_6_1_2 = -1;
    double limi_rotation_6_2_0 = rotation_matrix_6_1_0;
    double limi_rotation_6_2_1 = rotation_matrix_6_1_1;
    double limi_rotation_6_2_2 = 0;
    double oMi_rotation_6_0_0 = (((final_omi_rotation_5_0_0 * limi_rotation_6_0_0) + (final_omi_rotation_5_0_1 * limi_rotation_6_1_0)) + (final_omi_rotation_5_0_2 * limi_rotation_6_2_0));
    double oMi_rotation_6_0_1 = (((final_omi_rotation_5_0_0 * limi_rotation_6_0_1) + (final_omi_rotation_5_0_1 * limi_rotation_6_1_1)) + (final_omi_rotation_5_0_2 * limi_rotation_6_2_1));
    double oMi_rotation_6_0_2 = (((final_omi_rotation_5_0_0 * limi_rotation_6_0_2) + (final_omi_rotation_5_0_1 * limi_rotation_6_1_2)) + (final_omi_rotation_5_0_2 * limi_rotation_6_2_2));
    double oMi_rotation_6_1_0 = (((final_omi_rotation_5_1_0 * limi_rotation_6_0_0) + (final_omi_rotation_5_1_1 * limi_rotation_6_1_0)) + (final_omi_rotation_5_1_2 * limi_rotation_6_2_0));
    double oMi_rotation_6_1_1 = (((final_omi_rotation_5_1_0 * limi_rotation_6_0_1) + (final_omi_rotation_5_1_1 * limi_rotation_6_1_1)) + (final_omi_rotation_5_1_2 * limi_rotation_6_2_1));
    double oMi_rotation_6_1_2 = (((final_omi_rotation_5_1_0 * limi_rotation_6_0_2) + (final_omi_rotation_5_1_1 * limi_rotation_6_1_2)) + (final_omi_rotation_5_1_2 * limi_rotation_6_2_2));
    double oMi_rotation_6_2_0 = (((final_omi_rotation_5_2_0 * limi_rotation_6_0_0) + (final_omi_rotation_5_2_1 * limi_rotation_6_1_0)) + (final_omi_rotation_5_2_2 * limi_rotation_6_2_0));
    double oMi_rotation_6_2_1 = (((final_omi_rotation_5_2_0 * limi_rotation_6_0_1) + (final_omi_rotation_5_2_1 * limi_rotation_6_1_1)) + (final_omi_rotation_5_2_2 * limi_rotation_6_2_1));
    double oMi_rotation_6_2_2 = (((final_omi_rotation_5_2_0 * limi_rotation_6_0_2) + (final_omi_rotation_5_2_1 * limi_rotation_6_1_2)) + (final_omi_rotation_5_2_2 * limi_rotation_6_2_2));
    double r_46_oMi_rotation_6_0_0 = (((final_omi_rotation_5_0_0 * limi_rotation_6_0_0) + (final_omi_rotation_5_0_1 * limi_rotation_6_1_0)) + (final_omi_rotation_5_0_2 * limi_rotation_6_2_0));
    double r_46_oMi_rotation_6_0_1 = (((final_omi_rotation_5_0_0 * limi_rotation_6_0_1) + (final_omi_rotation_5_0_1 * limi_rotation_6_1_1)) + (final_omi_rotation_5_0_2 * limi_rotation_6_2_1));
    double r_46_oMi_rotation_6_0_2 = (((final_omi_rotation_5_0_0 * limi_rotation_6_0_2) + (final_omi_rotation_5_0_1 * limi_rotation_6_1_2)) + (final_omi_rotation_5_0_2 * limi_rotation_6_2_2));
    double r_46_oMi_rotation_6_1_0 = (((final_omi_rotation_5_1_0 * limi_rotation_6_0_0) + (final_omi_rotation_5_1_1 * limi_rotation_6_1_0)) + (final_omi_rotation_5_1_2 * limi_rotation_6_2_0));
    double r_46_oMi_rotation_6_1_1 = (((final_omi_rotation_5_1_0 * limi_rotation_6_0_1) + (final_omi_rotation_5_1_1 * limi_rotation_6_1_1)) + (final_omi_rotation_5_1_2 * limi_rotation_6_2_1));
    double r_46_oMi_rotation_6_1_2 = (((final_omi_rotation_5_1_0 * limi_rotation_6_0_2) + (final_omi_rotation_5_1_1 * limi_rotation_6_1_2)) + (final_omi_rotation_5_1_2 * limi_rotation_6_2_2));
    double r_46_oMi_rotation_6_2_0 = (((final_omi_rotation_5_2_0 * limi_rotation_6_0_0) + (final_omi_rotation_5_2_1 * limi_rotation_6_1_0)) + (final_omi_rotation_5_2_2 * limi_rotation_6_2_0));
    double r_46_oMi_rotation_6_2_1 = (((final_omi_rotation_5_2_0 * limi_rotation_6_0_1) + (final_omi_rotation_5_2_1 * limi_rotation_6_1_1)) + (final_omi_rotation_5_2_2 * limi_rotation_6_2_1));
    double r_46_oMi_rotation_6_2_2 = (((final_omi_rotation_5_2_0 * limi_rotation_6_0_2) + (final_omi_rotation_5_2_1 * limi_rotation_6_1_2)) + (final_omi_rotation_5_2_2 * limi_rotation_6_2_2));
    double oMi_translation_to_add_6_0 = (((final_omi_rotation_5_0_0 * limi_translation_6_0) + (final_omi_rotation_5_0_1 * limi_translation_6_1)) + (final_omi_rotation_5_0_2 * limi_translation_6_2));
    double oMi_translation_to_add_6_1 = (((final_omi_rotation_5_1_0 * limi_translation_6_0) + (final_omi_rotation_5_1_1 * limi_translation_6_1)) + (final_omi_rotation_5_1_2 * limi_translation_6_2));
    double oMi_translation_to_add_6_2 = (((final_omi_rotation_5_2_0 * limi_translation_6_0) + (final_omi_rotation_5_2_1 * limi_translation_6_1)) + (final_omi_rotation_5_2_2 * limi_translation_6_2));
    double oMi_translation_6_0 = (final_omi_translation_5_0 + oMi_translation_to_add_6_0);
    double oMi_translation_6_1 = (final_omi_translation_5_1 + oMi_translation_to_add_6_1);
    double oMi_translation_6_2 = (final_omi_translation_5_2 + oMi_translation_to_add_6_2);
    double final_omi_rotation_6_0_0 = r_46_oMi_rotation_6_0_0;
    double final_omi_rotation_6_0_1 = r_46_oMi_rotation_6_0_1;
    double final_omi_rotation_6_0_2 = r_46_oMi_rotation_6_0_2;
    double final_omi_rotation_6_1_0 = r_46_oMi_rotation_6_1_0;
    double final_omi_rotation_6_1_1 = r_46_oMi_rotation_6_1_1;
    double final_omi_rotation_6_1_2 = r_46_oMi_rotation_6_1_2;
    double final_omi_rotation_6_2_0 = r_46_oMi_rotation_6_2_0;
    double final_omi_rotation_6_2_1 = r_46_oMi_rotation_6_2_1;
    double final_omi_rotation_6_2_2 = r_46_oMi_rotation_6_2_2;
    double final_omi_translation_6_0 = oMi_translation_6_0;
    double final_omi_translation_6_1 = oMi_translation_6_1;
    double final_omi_translation_6_2 = oMi_translation_6_2;
    double temp_v_6_0 = 0;
    double temp_v_6_1 = 0;
    double temp_v_6_2 = 0;
    double temp_v_6_3 = 0;
    double temp_v_6_4 = 0;
    double temp_v_6_5 = v_6;
    double linear_parent_6_0 = final_v_5_0;
    double linear_parent_6_1 = final_v_5_1;
    double linear_parent_6_2 = final_v_5_2;
    double angular_parent_6_0 = final_v_5_3;
    double angular_parent_6_1 = final_v_5_4;
    double angular_parent_6_2 = final_v_5_5;
    double linear_6_0 = temp_v_6_0;
    double linear_6_1 = temp_v_6_1;
    double linear_6_2 = temp_v_6_2;
    double angular_6_0 = temp_v_6_3;
    double angular_6_1 = temp_v_6_4;
    double angular_6_2 = temp_v_6_5;
    double actInv1_6_0 = ((limi_translation_6_1 * angular_parent_6_2) - (limi_translation_6_2 * angular_parent_6_1));
    double actInv1_6_1 = ((limi_translation_6_2 * angular_parent_6_0) - (limi_translation_6_0 * angular_parent_6_2));
    double actInv1_6_2 = ((limi_translation_6_0 * angular_parent_6_1) - (limi_translation_6_1 * angular_parent_6_0));
    double actInv2_6_0 = (linear_parent_6_0 - actInv1_6_0);
    double actInv2_6_1 = (linear_parent_6_1 - actInv1_6_1);
    double actInv2_6_2 = (linear_parent_6_2 - actInv1_6_2);
    double actInv3_6_0_0 = limi_rotation_6_0_0;
    double actInv3_6_1_0 = limi_rotation_6_0_1;
    double actInv3_6_2_0 = limi_rotation_6_0_2;
    double actInv3_6_0_1 = limi_rotation_6_1_0;
    double actInv3_6_1_1 = limi_rotation_6_1_1;
    double actInv3_6_2_1 = limi_rotation_6_1_2;
    double actInv3_6_0_2 = limi_rotation_6_2_0;
    double actInv3_6_1_2 = limi_rotation_6_2_1;
    double actInv3_6_2_2 = limi_rotation_6_2_2;
    double actInv4_6_0 = (((actInv3_6_0_0 * actInv2_6_0) + (actInv3_6_0_1 * actInv2_6_1)) + (actInv3_6_0_2 * actInv2_6_2));
    double actInv4_6_1 = (((actInv3_6_1_0 * actInv2_6_0) + (actInv3_6_1_1 * actInv2_6_1)) + (actInv3_6_1_2 * actInv2_6_2));
    double actInv4_6_2 = (((actInv3_6_2_0 * actInv2_6_0) + (actInv3_6_2_1 * actInv2_6_1)) + (actInv3_6_2_2 * actInv2_6_2));
    double act_inv_linear_6_0 = (linear_6_0 + actInv4_6_0);
    double act_inv_linear_6_1 = (linear_6_1 + actInv4_6_1);
    double act_inv_linear_6_2 = (linear_6_2 + actInv4_6_2);
    double actInv5_6_0 = (((actInv3_6_0_0 * angular_parent_6_0) + (actInv3_6_0_1 * angular_parent_6_1)) + (actInv3_6_0_2 * angular_parent_6_2));
    double actInv5_6_1 = (((actInv3_6_1_0 * angular_parent_6_0) + (actInv3_6_1_1 * angular_parent_6_1)) + (actInv3_6_1_2 * angular_parent_6_2));
    double actInv5_6_2 = (((actInv3_6_2_0 * angular_parent_6_0) + (actInv3_6_2_1 * angular_parent_6_1)) + (actInv3_6_2_2 * angular_parent_6_2));
    double act_inv_angular_6_0 = (angular_6_0 + actInv5_6_0);
    double act_inv_angular_6_1 = (angular_6_1 + actInv5_6_1);
    double act_inv_angular_6_2 = (angular_6_2 + actInv5_6_2);
    double act_inv_res_6_0 = act_inv_linear_6_0;
    double act_inv_res_6_1 = act_inv_linear_6_1;
    double act_inv_res_6_2 = act_inv_linear_6_2;
    double act_inv_res_6_3 = act_inv_angular_6_0;
    double act_inv_res_6_4 = act_inv_angular_6_1;
    double act_inv_res_6_5 = act_inv_angular_6_2;
    double final_v_6_0 = act_inv_res_6_0;
    double final_v_6_1 = act_inv_res_6_1;
    double final_v_6_2 = act_inv_res_6_2;
    double final_v_6_3 = act_inv_res_6_3;
    double final_v_6_4 = act_inv_res_6_4;
    double final_v_6_5 = act_inv_res_6_5;
    double minus_m_w_6 = -(v_6);
    double vin_linear_6_0 = final_v_6_0;
    double vin_linear_6_1 = final_v_6_1;
    double vin_linear_6_2 = final_v_6_2;
    double vin_angular_6_0 = final_v_6_3;
    double vin_angular_6_1 = final_v_6_4;
    double vin_angular_6_2 = final_v_6_5;
    double alpha_cross1_linear_6 = (-(minus_m_w_6) * vin_linear_6_1);
    double alpha_cross2_linear_6 = (minus_m_w_6 * vin_linear_6_0);
    double alpha_cross_linear_6_0 = alpha_cross1_linear_6;
    double alpha_cross_linear_6_1 = alpha_cross2_linear_6;
    double alpha_cross_linear_6_2 = 0;
    double alpha_cross1_angular_6 = (-(minus_m_w_6) * vin_angular_6_1);
    double alpha_cross2_angular_6 = (minus_m_w_6 * vin_angular_6_0);
    double alpha_cross_angular_6_0 = alpha_cross1_angular_6;
    double alpha_cross_angular_6_1 = alpha_cross2_angular_6;
    double alpha_cross_angular_6_2 = 0;
    double alpha_cross_6_0 = alpha_cross_linear_6_0;
    double alpha_cross_6_1 = alpha_cross_linear_6_1;
    double alpha_cross_6_2 = alpha_cross_linear_6_2;
    double alpha_cross_6_3 = alpha_cross_angular_6_0;
    double alpha_cross_6_4 = alpha_cross_angular_6_1;
    double alpha_cross_6_5 = alpha_cross_angular_6_2;
    double temp_a2_6 = (a_6 + alpha_cross_6_5);
    double temp_a3_6_0 = alpha_cross_6_0;
    double temp_a3_6_1 = alpha_cross_6_1;
    double temp_a3_6_2 = alpha_cross_6_2;
    double temp_a3_6_3 = alpha_cross_6_3;
    double temp_a3_6_4 = alpha_cross_6_4;
    double temp_a3_6_5 = temp_a2_6;
    double r_47_linear_parent_6_0 = final_a_5_0;
    double r_47_linear_parent_6_1 = final_a_5_1;
    double r_47_linear_parent_6_2 = final_a_5_2;
    double r_48_angular_parent_6_0 = final_a_5_3;
    double r_48_angular_parent_6_1 = final_a_5_4;
    double r_48_angular_parent_6_2 = final_a_5_5;
    double r_49_actInv1_6_0 = ((limi_translation_6_1 * r_48_angular_parent_6_2) - (limi_translation_6_2 * r_48_angular_parent_6_1));
    double r_49_actInv1_6_1 = ((limi_translation_6_2 * r_48_angular_parent_6_0) - (limi_translation_6_0 * r_48_angular_parent_6_2));
    double r_49_actInv1_6_2 = ((limi_translation_6_0 * r_48_angular_parent_6_1) - (limi_translation_6_1 * r_48_angular_parent_6_0));
    double r_50_actInv2_6_0 = (r_47_linear_parent_6_0 - r_49_actInv1_6_0);
    double r_50_actInv2_6_1 = (r_47_linear_parent_6_1 - r_49_actInv1_6_1);
    double r_50_actInv2_6_2 = (r_47_linear_parent_6_2 - r_49_actInv1_6_2);
    double r_51_actInv3_6_0_0 = limi_rotation_6_0_0;
    double r_51_actInv3_6_1_0 = limi_rotation_6_0_1;
    double r_51_actInv3_6_2_0 = limi_rotation_6_0_2;
    double r_51_actInv3_6_0_1 = limi_rotation_6_1_0;
    double r_51_actInv3_6_1_1 = limi_rotation_6_1_1;
    double r_51_actInv3_6_2_1 = limi_rotation_6_1_2;
    double r_51_actInv3_6_0_2 = limi_rotation_6_2_0;
    double r_51_actInv3_6_1_2 = limi_rotation_6_2_1;
    double r_51_actInv3_6_2_2 = limi_rotation_6_2_2;
    double r_52_actInv4_6_0 = (((r_51_actInv3_6_0_0 * r_50_actInv2_6_0) + (r_51_actInv3_6_0_1 * r_50_actInv2_6_1)) + (r_51_actInv3_6_0_2 * r_50_actInv2_6_2));
    double r_52_actInv4_6_1 = (((r_51_actInv3_6_1_0 * r_50_actInv2_6_0) + (r_51_actInv3_6_1_1 * r_50_actInv2_6_1)) + (r_51_actInv3_6_1_2 * r_50_actInv2_6_2));
    double r_52_actInv4_6_2 = (((r_51_actInv3_6_2_0 * r_50_actInv2_6_0) + (r_51_actInv3_6_2_1 * r_50_actInv2_6_1)) + (r_51_actInv3_6_2_2 * r_50_actInv2_6_2));
    double r_53_actInv5_6_0 = (((r_51_actInv3_6_0_0 * r_48_angular_parent_6_0) + (r_51_actInv3_6_0_1 * r_48_angular_parent_6_1)) + (r_51_actInv3_6_0_2 * r_48_angular_parent_6_2));
    double r_53_actInv5_6_1 = (((r_51_actInv3_6_1_0 * r_48_angular_parent_6_0) + (r_51_actInv3_6_1_1 * r_48_angular_parent_6_1)) + (r_51_actInv3_6_1_2 * r_48_angular_parent_6_2));
    double r_53_actInv5_6_2 = (((r_51_actInv3_6_2_0 * r_48_angular_parent_6_0) + (r_51_actInv3_6_2_1 * r_48_angular_parent_6_1)) + (r_51_actInv3_6_2_2 * r_48_angular_parent_6_2));
    double r_54_act_inv_res_6_0 = r_52_actInv4_6_0;
    double r_54_act_inv_res_6_1 = r_52_actInv4_6_1;
    double r_54_act_inv_res_6_2 = r_52_actInv4_6_2;
    double r_54_act_inv_res_6_3 = r_53_actInv5_6_0;
    double r_54_act_inv_res_6_4 = r_53_actInv5_6_1;
    double r_54_act_inv_res_6_5 = r_53_actInv5_6_2;
    double final_a_6_0 = (temp_a3_6_0 + r_54_act_inv_res_6_0);
    double final_a_6_1 = (temp_a3_6_1 + r_54_act_inv_res_6_1);
    double final_a_6_2 = (temp_a3_6_2 + r_54_act_inv_res_6_2);
    double final_a_6_3 = (temp_a3_6_3 + r_54_act_inv_res_6_3);
    double final_a_6_4 = (temp_a3_6_4 + r_54_act_inv_res_6_4);
    double final_a_6_5 = (temp_a3_6_5 + r_54_act_inv_res_6_5);
    
    SE3 res0 = {
        .translation = {
            limi_translation_0_0,
            limi_translation_0_1,
            limi_translation_0_2
        },
        .rotation = {
            limi_rotation_0_0_0,
            limi_rotation_0_0_1,
            limi_rotation_0_0_2,
            limi_rotation_0_1_0,
            limi_rotation_0_1_1,
            limi_rotation_0_1_2,
            limi_rotation_0_2_0,
            limi_rotation_0_2_1,
            limi_rotation_0_2_2
        }
    };

    SE3 res1 = {
        .translation = {
            final_omi_translation_1_0,
            final_omi_translation_1_1,
            final_omi_translation_1_2
        },
        .rotation = {
            final_omi_rotation_1_0_0,
            final_omi_rotation_1_0_1,
            final_omi_rotation_1_0_2,
            final_omi_rotation_1_1_0,
            final_omi_rotation_1_1_1,
            final_omi_rotation_1_1_2,
            final_omi_rotation_1_2_0,
            final_omi_rotation_1_2_1,
            final_omi_rotation_1_2_2
        }
    };

    SE3 res2 = {
        .translation = {
            final_omi_translation_2_0,
            final_omi_translation_2_1,
            final_omi_translation_2_2
        },
        .rotation = {
            final_omi_rotation_2_0_0,
            final_omi_rotation_2_0_1,
            final_omi_rotation_2_0_2,
            final_omi_rotation_2_1_0,
            final_omi_rotation_2_1_1,
            final_omi_rotation_2_1_2,
            final_omi_rotation_2_2_0,
            final_omi_rotation_2_2_1,
            final_omi_rotation_2_2_2
        }
    };

    SE3 res3 = {
        .translation = {
            final_omi_translation_3_0,
            final_omi_translation_3_1,
            final_omi_translation_3_2
        },
        .rotation = {
            final_omi_rotation_3_0_0,
            final_omi_rotation_3_0_1,
            final_omi_rotation_3_0_2,
            final_omi_rotation_3_1_0,
            final_omi_rotation_3_1_1,
            final_omi_rotation_3_1_2,
            final_omi_rotation_3_2_0,
            final_omi_rotation_3_2_1,
            final_omi_rotation_3_2_2
        }
    };

    SE3 res4 = {
        .translation = {
            final_omi_translation_4_0,
            final_omi_translation_4_1,
            final_omi_translation_4_2
        },
        .rotation = {
            final_omi_rotation_4_0_0,
            final_omi_rotation_4_0_1,
            final_omi_rotation_4_0_2,
            final_omi_rotation_4_1_0,
            final_omi_rotation_4_1_1,
            final_omi_rotation_4_1_2,
            final_omi_rotation_4_2_0,
            final_omi_rotation_4_2_1,
            final_omi_rotation_4_2_2
        }
    };

    SE3 res5 = {
        .translation = {
            final_omi_translation_5_0,
            final_omi_translation_5_1,
            final_omi_translation_5_2
        },
        .rotation = {
            final_omi_rotation_5_0_0,
            final_omi_rotation_5_0_1,
            final_omi_rotation_5_0_2,
            final_omi_rotation_5_1_0,
            final_omi_rotation_5_1_1,
            final_omi_rotation_5_1_2,
            final_omi_rotation_5_2_0,
            final_omi_rotation_5_2_1,
            final_omi_rotation_5_2_2
        }
    };

    SE3 res6 = {
        .translation = {
            final_omi_translation_6_0,
            final_omi_translation_6_1,
            final_omi_translation_6_2
        },
        .rotation = {
            final_omi_rotation_6_0_0,
            final_omi_rotation_6_0_1,
            final_omi_rotation_6_0_2,
            final_omi_rotation_6_1_0,
            final_omi_rotation_6_1_1,
            final_omi_rotation_6_1_2,
            final_omi_rotation_6_2_0,
            final_omi_rotation_6_2_1,
            final_omi_rotation_6_2_2
        }
    };

    SE3s res = {
        .SE3 = {
            res0,
            res1,
            res2,
            res3,
            res4,
            res5,
            res6
        }
    };
    return res;

} // [0.0, 0.0] +/- 4.9e-324

